<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>fftconvolve (scipy/signal/signaltools.py:538) (1,546 samples, 2.17%)</title><rect x="0.4800%" y="148" width="2.1699%" height="15" fill="rgb(227,0,7)"/><text x="0.7300%" y="158.50">f..</text></g><g><title>convolve (scipy/signal/signaltools.py:1270) (1,561 samples, 2.19%)</title><rect x="0.4744%" y="132" width="2.1909%" height="15" fill="rgb(217,0,24)"/><text x="0.7244%" y="142.50">c..</text></g><g><title>fastNormXCorr (dvcImpl.py:151) (1,565 samples, 2.20%)</title><rect x="0.4716%" y="100" width="2.1966%" height="15" fill="rgb(221,193,54)"/><text x="0.7216%" y="110.50">f..</text></g><g><title>correlate (scipy/signal/signaltools.py:210) (1,564 samples, 2.20%)</title><rect x="0.4730%" y="116" width="2.1951%" height="15" fill="rgb(248,212,6)"/><text x="0.7230%" y="126.50">c..</text></g><g><title>correlate (dvcImpl.py:266) (1,911 samples, 2.68%)</title><rect x="0.0014%" y="84" width="2.6822%" height="15" fill="rgb(208,68,35)"/><text x="0.2514%" y="94.50">co..</text></g><g><title>trf_bounds (scipy/optimize/_lsq/trf.py:261) (3,105 samples, 4.36%)</title><rect x="2.9292%" y="148" width="4.3580%" height="15" fill="rgb(232,128,0)"/><text x="3.1792%" y="158.50">trf_b..</text></g><g><title>norm (&lt;__array_function__ internals&gt;:5) (1,304 samples, 1.83%)</title><rect x="7.5567%" y="164" width="1.8302%" height="15" fill="rgb(207,160,47)"/><text x="7.8067%" y="174.50">n..</text></g><g><title>norm (numpy/linalg/linalg.py:2549) (862 samples, 1.21%)</title><rect x="8.1771%" y="180" width="1.2099%" height="15" fill="rgb(228,23,34)"/><text x="8.4271%" y="190.50"></text></g><g><title>trf_bounds (scipy/optimize/_lsq/trf.py:263) (1,499 samples, 2.10%)</title><rect x="7.2872%" y="148" width="2.1039%" height="15" fill="rgb(218,30,26)"/><text x="7.5372%" y="158.50">t..</text></g><g><title>trf_bounds (scipy/optimize/_lsq/trf.py:283) (858 samples, 1.20%)</title><rect x="9.4852%" y="148" width="1.2042%" height="15" fill="rgb(220,122,19)"/><text x="9.7352%" y="158.50"></text></g><g><title>trf_bounds (scipy/optimize/_lsq/trf.py:300) (872 samples, 1.22%)</title><rect x="12.3372%" y="148" width="1.2239%" height="15" fill="rgb(250,228,42)"/><text x="12.5872%" y="158.50"></text></g><g><title>asarray_chkfinite (numpy/lib/function_base.py:484) (804 samples, 1.13%)</title><rect x="14.4046%" y="196" width="1.1285%" height="15" fill="rgb(240,193,28)"/><text x="14.6546%" y="206.50"></text></g><g><title>_asarray_validated (scipy/_lib/_util.py:263) (920 samples, 1.29%)</title><rect x="14.2446%" y="180" width="1.2913%" height="15" fill="rgb(216,20,37)"/><text x="14.4946%" y="190.50"></text></g><g><title>svd (scipy/linalg/decomp_svd.py:106) (1,373 samples, 1.93%)</title><rect x="13.7323%" y="164" width="1.9271%" height="15" fill="rgb(206,188,39)"/><text x="13.9823%" y="174.50">s..</text></g><g><title>svd (scipy/linalg/decomp_svd.py:121) (963 samples, 1.35%)</title><rect x="16.3485%" y="164" width="1.3516%" height="15" fill="rgb(217,207,13)"/><text x="16.5985%" y="174.50"></text></g><g><title>svd (scipy/linalg/decomp_svd.py:125) (3,770 samples, 5.29%)</title><rect x="17.7015%" y="164" width="5.2914%" height="15" fill="rgb(231,73,38)"/><text x="17.9515%" y="174.50">svd (s..</text></g><g><title>trf_bounds (scipy/optimize/_lsq/trf.py:301) (6,761 samples, 9.49%)</title><rect x="13.5611%" y="148" width="9.4894%" height="15" fill="rgb(225,20,46)"/><text x="13.8111%" y="158.50">trf_bounds (sc..</text></g><g><title>norm (&lt;__array_function__ internals&gt;:5) (1,056 samples, 1.48%)</title><rect x="25.4463%" y="180" width="1.4821%" height="15" fill="rgb(210,31,41)"/><text x="25.6963%" y="190.50"></text></g><g><title>solve_lsq_trust_region (scipy/optimize/_lsq/common.py:129) (1,155 samples, 1.62%)</title><rect x="25.3088%" y="164" width="1.6211%" height="15" fill="rgb(221,200,47)"/><text x="25.5588%" y="174.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;:5) (1,009 samples, 1.42%)</title><rect x="30.2044%" y="196" width="1.4162%" height="15" fill="rgb(226,26,5)"/><text x="30.4544%" y="206.50"></text></g><g><title>sum (numpy/core/fromnumeric.py:2241) (940 samples, 1.32%)</title><rect x="30.3012%" y="212" width="1.3193%" height="15" fill="rgb(249,33,26)"/><text x="30.5512%" y="222.50"></text></g><g><title>phi_and_derivative (scipy/optimize/_lsq/common.py:115) (1,727 samples, 2.42%)</title><rect x="29.2008%" y="180" width="2.4239%" height="15" fill="rgb(235,183,28)"/><text x="29.4508%" y="190.50">ph..</text></g><g><title>solve_lsq_trust_region (scipy/optimize/_lsq/common.py:135) (2,801 samples, 3.93%)</title><rect x="27.7074%" y="164" width="3.9313%" height="15" fill="rgb(221,5,38)"/><text x="27.9574%" y="174.50">solv..</text></g><g><title>phi_and_derivative (scipy/optimize/_lsq/common.py:112) (772 samples, 1.08%)</title><rect x="32.1076%" y="180" width="1.0835%" height="15" fill="rgb(247,18,42)"/><text x="32.3576%" y="190.50"></text></g><g><title>norm (&lt;__array_function__ internals&gt;:5) (1,268 samples, 1.78%)</title><rect x="33.5602%" y="196" width="1.7797%" height="15" fill="rgb(241,131,45)"/><text x="33.8102%" y="206.50">n..</text></g><g><title>phi_and_derivative (scipy/optimize/_lsq/common.py:113) (1,536 samples, 2.16%)</title><rect x="33.1911%" y="180" width="2.1558%" height="15" fill="rgb(249,31,29)"/><text x="33.4411%" y="190.50">p..</text></g><g><title>sum (numpy/core/fromnumeric.py:2241) (1,234 samples, 1.73%)</title><rect x="37.2235%" y="212" width="1.7320%" height="15" fill="rgb(225,111,53)"/><text x="37.4735%" y="222.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:87) (719 samples, 1.01%)</title><rect x="37.9463%" y="228" width="1.0092%" height="15" fill="rgb(238,160,17)"/><text x="38.1963%" y="238.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;:5) (1,342 samples, 1.88%)</title><rect x="37.0733%" y="196" width="1.8836%" height="15" fill="rgb(214,148,48)"/><text x="37.3233%" y="206.50">s..</text></g><g><title>phi_and_derivative (scipy/optimize/_lsq/common.py:115) (2,555 samples, 3.59%)</title><rect x="35.3806%" y="180" width="3.5861%" height="15" fill="rgb(232,36,49)"/><text x="35.6306%" y="190.50">phi_..</text></g><g><title>solve_lsq_trust_region (scipy/optimize/_lsq/common.py:149) (5,038 samples, 7.07%)</title><rect x="31.9125%" y="164" width="7.0711%" height="15" fill="rgb(209,103,24)"/><text x="32.1625%" y="174.50">solve_lsq..</text></g><g><title>solve_lsq_trust_region (scipy/optimize/_lsq/common.py:166) (1,040 samples, 1.46%)</title><rect x="41.4187%" y="164" width="1.4597%" height="15" fill="rgb(229,88,8)"/><text x="41.6687%" y="174.50"></text></g><g><title>trf_bounds (scipy/optimize/_lsq/trf.py:327) (13,511 samples, 18.96%)</title><rect x="23.9530%" y="148" width="18.9633%" height="15" fill="rgb(213,181,19)"/><text x="24.2030%" y="158.50">trf_bounds (scipy/optimize/_ls..</text></g><g><title>select_step (scipy/optimize/_lsq/trf.py:130) (1,173 samples, 1.65%)</title><rect x="43.1774%" y="164" width="1.6464%" height="15" fill="rgb(254,191,54)"/><text x="43.4274%" y="174.50"></text></g><g><title>in_bounds (scipy/optimize/_lsq/common.py:369) (1,039 samples, 1.46%)</title><rect x="43.3654%" y="180" width="1.4583%" height="15" fill="rgb(241,83,37)"/><text x="43.6154%" y="190.50"></text></g><g><title>select_step (scipy/optimize/_lsq/trf.py:131) (928 samples, 1.30%)</title><rect x="44.8237%" y="164" width="1.3025%" height="15" fill="rgb(233,36,39)"/><text x="45.0737%" y="174.50"></text></g><g><title>trf_bounds (scipy/optimize/_lsq/trf.py:334) (2,418 samples, 3.39%)</title><rect x="43.0454%" y="148" width="3.3938%" height="15" fill="rgb(226,3,54)"/><text x="43.2954%" y="158.50">trf..</text></g><g><title>zeros_like (&lt;__array_function__ internals&gt;:5) (769 samples, 1.08%)</title><rect x="47.1143%" y="196" width="1.0793%" height="15" fill="rgb(245,192,40)"/><text x="47.3643%" y="206.50"></text></g><g><title>find_active_constraints (scipy/optimize/_lsq/common.py:416) (890 samples, 1.25%)</title><rect x="46.9529%" y="180" width="1.2492%" height="15" fill="rgb(238,167,29)"/><text x="47.2029%" y="190.50"></text></g><g><title>make_strictly_feasible (scipy/optimize/_lsq/common.py:448) (1,333 samples, 1.87%)</title><rect x="46.8855%" y="164" width="1.8709%" height="15" fill="rgb(232,182,51)"/><text x="47.1355%" y="174.50">m..</text></g><g><title>trf_bounds (scipy/optimize/_lsq/trf.py:337) (3,008 samples, 4.22%)</title><rect x="46.4448%" y="148" width="4.2219%" height="15" fill="rgb(231,60,39)"/><text x="46.6948%" y="158.50">trf_b..</text></g><g><title>trf_bounds (scipy/optimize/_lsq/trf.py:338) (3,037 samples, 4.26%)</title><rect x="50.6667%" y="148" width="4.2626%" height="15" fill="rgb(208,69,12)"/><text x="50.9167%" y="158.50">trf_b..</text></g><g><title>fun_wrapped (scipy/optimize/_lsq/least_squares.py:802) (2,988 samples, 4.19%)</title><rect x="50.7355%" y="164" width="4.1938%" height="15" fill="rgb(235,93,37)"/><text x="50.9855%" y="174.50">fun_w..</text></g><g><title>func_wrapped (scipy/optimize/minpack.py:484) (2,536 samples, 3.56%)</title><rect x="51.3699%" y="180" width="3.5594%" height="15" fill="rgb(213,116,39)"/><text x="51.6199%" y="190.50">func..</text></g><g><title>fittingFunction (dvcImpl.py:192) (1,993 samples, 2.80%)</title><rect x="52.1320%" y="196" width="2.7973%" height="15" fill="rgb(222,207,29)"/><text x="52.3820%" y="206.50">fi..</text></g><g><title>norm (&lt;__array_function__ internals&gt;:5) (739 samples, 1.04%)</title><rect x="55.0724%" y="164" width="1.0372%" height="15" fill="rgb(206,96,30)"/><text x="55.3224%" y="174.50"></text></g><g><title>trf_bounds (scipy/optimize/_lsq/trf.py:341) (824 samples, 1.16%)</title><rect x="54.9559%" y="148" width="1.1565%" height="15" fill="rgb(218,138,4)"/><text x="55.2059%" y="158.50"></text></g><g><title>trf_bounds (scipy/optimize/_lsq/trf.py:343) (944 samples, 1.32%)</title><rect x="56.1125%" y="148" width="1.3249%" height="15" fill="rgb(250,191,14)"/><text x="56.3625%" y="158.50"></text></g><g><title>_prepare_bounds (scipy/optimize/_numdiff.py:127) (894 samples, 1.25%)</title><rect x="61.1554%" y="196" width="1.2548%" height="15" fill="rgb(239,60,40)"/><text x="61.4054%" y="206.50"></text></g><g><title>&lt;listcomp&gt; (scipy/optimize/_numdiff.py:127) (824 samples, 1.16%)</title><rect x="61.2536%" y="212" width="1.1565%" height="15" fill="rgb(206,27,48)"/><text x="61.5036%" y="222.50"></text></g><g><title>approx_derivative (scipy/optimize/_numdiff.py:366) (960 samples, 1.35%)</title><rect x="61.1189%" y="180" width="1.3474%" height="15" fill="rgb(225,35,8)"/><text x="61.3689%" y="190.50"></text></g><g><title>approx_derivative (scipy/optimize/_numdiff.py:390) (860 samples, 1.21%)</title><rect x="62.8509%" y="180" width="1.2071%" height="15" fill="rgb(250,213,24)"/><text x="63.1009%" y="190.50"></text></g><g><title>_compute_absolute_step (scipy/optimize/_numdiff.py:112) (735 samples, 1.03%)</title><rect x="64.1829%" y="196" width="1.0316%" height="15" fill="rgb(247,123,22)"/><text x="64.4329%" y="206.50"></text></g><g><title>approx_derivative (scipy/optimize/_numdiff.py:402) (1,344 samples, 1.89%)</title><rect x="64.0860%" y="180" width="1.8864%" height="15" fill="rgb(231,138,38)"/><text x="64.3360%" y="190.50">a..</text></g><g><title>_adjust_scheme_to_bounds (scipy/optimize/_numdiff.py:52) (906 samples, 1.27%)</title><rect x="67.1584%" y="196" width="1.2716%" height="15" fill="rgb(231,145,46)"/><text x="67.4084%" y="206.50"></text></g><g><title>approx_derivative (scipy/optimize/_numdiff.py:417) (4,295 samples, 6.03%)</title><rect x="66.0047%" y="180" width="6.0282%" height="15" fill="rgb(251,118,11)"/><text x="66.2547%" y="190.50">approx_d..</text></g><g><title>_dense_difference (scipy/optimize/_numdiff.py:491) (729 samples, 1.02%)</title><rect x="72.4259%" y="196" width="1.0232%" height="15" fill="rgb(217,147,25)"/><text x="72.6759%" y="206.50"></text></g><g><title>_dense_difference (scipy/optimize/_numdiff.py:495) (733 samples, 1.03%)</title><rect x="73.7143%" y="196" width="1.0288%" height="15" fill="rgb(247,81,37)"/><text x="73.9643%" y="206.50"></text></g><g><title>atleast_1d (&lt;__array_function__ internals&gt;:5) (995 samples, 1.40%)</title><rect x="77.2246%" y="228" width="1.3965%" height="15" fill="rgb(209,12,38)"/><text x="77.4746%" y="238.50"></text></g><g><title>fun_wrapped (scipy/optimize/_numdiff.py:377) (14,650 samples, 20.56%)</title><rect x="76.3151%" y="212" width="20.5620%" height="15" fill="rgb(227,1,9)"/><text x="76.5651%" y="222.50">fun_wrapped (scipy/optimize/_num..</text></g><g><title>func_wrapped (scipy/optimize/minpack.py:484) (12,993 samples, 18.24%)</title><rect x="78.6408%" y="228" width="18.2363%" height="15" fill="rgb(248,47,43)"/><text x="78.8908%" y="238.50">func_wrapped (scipy/optimize..</text></g><g><title>fittingFunction (dvcImpl.py:192) (10,794 samples, 15.15%)</title><rect x="81.7272%" y="244" width="15.1499%" height="15" fill="rgb(221,10,30)"/><text x="81.9772%" y="254.50">fittingFunction (dvcImp..</text></g><g><title>_dense_difference (scipy/optimize/_numdiff.py:497) (15,449 samples, 21.68%)</title><rect x="75.2821%" y="196" width="21.6834%" height="15" fill="rgb(210,229,1)"/><text x="75.5321%" y="206.50">_dense_difference (scipy/optimize/..</text></g><g><title>_dense_difference (scipy/optimize/_numdiff.py:519) (1,701 samples, 2.39%)</title><rect x="96.9655%" y="196" width="2.3874%" height="15" fill="rgb(222,148,37)"/><text x="97.2155%" y="206.50">_d..</text></g><g><title>approx_derivative (scipy/optimize/_numdiff.py:426) (19,517 samples, 27.39%)</title><rect x="72.0497%" y="180" width="27.3930%" height="15" fill="rgb(234,67,33)"/><text x="72.2997%" y="190.50">approx_derivative (scipy/optimize/_numdiff.p..</text></g><g><title>jac_wrapped (scipy/optimize/_lsq/least_squares.py:873) (27,795 samples, 39.01%)</title><rect x="60.4340%" y="164" width="39.0116%" height="15" fill="rgb(247,98,35)"/><text x="60.6840%" y="174.50">jac_wrapped (scipy/optimize/_lsq/least_squares.py:873)</text></g><g><title>trf_bounds (scipy/optimize/_lsq/trf.py:374) (27,898 samples, 39.16%)</title><rect x="60.3175%" y="148" width="39.1562%" height="15" fill="rgb(247,138,52)"/><text x="60.5675%" y="158.50">trf_bounds (scipy/optimize/_lsq/trf.py:374)</text></g><g><title>least_squares (scipy/optimize/_lsq/least_squares.py:915) (69,175 samples, 97.09%)</title><rect x="2.8941%" y="116" width="97.0904%" height="15" fill="rgb(213,79,30)"/><text x="3.1441%" y="126.50">least_squares (scipy/optimize/_lsq/least_squares.py:915)</text></g><g><title>trf (scipy/optimize/_lsq/trf.py:123) (69,173 samples, 97.09%)</title><rect x="2.8969%" y="132" width="97.0876%" height="15" fill="rgb(246,177,23)"/><text x="3.1469%" y="142.50">trf (scipy/optimize/_lsq/trf.py:123)</text></g><g><title>curve_fit (scipy/optimize/minpack.py:795) (69,292 samples, 97.25%)</title><rect x="2.7313%" y="100" width="97.2547%" height="15" fill="rgb(230,62,27)"/><text x="2.9813%" y="110.50">curve_fit (scipy/optimize/minpack.py:795)</text></g><g><title>correlate (dvcImpl.py:282) (69,327 samples, 97.30%)</title><rect x="2.6920%" y="84" width="97.3038%" height="15" fill="rgb(216,154,8)"/><text x="2.9420%" y="94.50">correlate (dvcImpl.py:282)</text></g><g><title>all (71,248 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(244,35,45)"/><text x="0.2500%" y="46.50"></text></g><g><title>&lt;module&gt; (dvc.py:124) (71,248 samples, 100.00%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(251,115,12)"/><text x="0.2500%" y="62.50">&lt;module&gt; (dvc.py:124)</text></g><g><title>dvc (dvcImpl.py:371) (71,248 samples, 100.00%)</title><rect x="0.0000%" y="68" width="100.0000%" height="15" fill="rgb(240,54,50)"/><text x="0.2500%" y="78.50">dvc (dvcImpl.py:371)</text></g></svg></svg>