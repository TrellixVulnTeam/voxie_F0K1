<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="566" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="549.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="549.00"> </text><svg id="frames" x="10" width="1180"><g><title>0x7ffbaff8704e (pyopencl\_cl.cp38-win_amd64.pyd) (3 samples, 3.80%)</title><rect x="0.0000%" y="84" width="3.7975%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="94.50">0x7f..</text></g><g><title>0x7ffbaff91a34 (pyopencl\_cl.cp38-win_amd64.pyd) (3 samples, 3.80%)</title><rect x="0.0000%" y="100" width="3.7975%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="110.50">0x7f..</text></g><g><title>0x7ffbaff8ade9 (pyopencl\_cl.cp38-win_amd64.pyd) (3 samples, 3.80%)</title><rect x="0.0000%" y="116" width="3.7975%" height="15" fill="rgb(221,193,54)"/><text x="0.2500%" y="126.50">0x7f..</text></g><g><title>0x7ffbad5e5f5e (numpy\core\_multiarray_umath.cp38-win_amd64.pyd) (3 samples, 3.80%)</title><rect x="0.0000%" y="132" width="3.7975%" height="15" fill="rgb(248,212,6)"/><text x="0.2500%" y="142.50">0x7f..</text></g><g><title>0x7ffbad5e2200 (numpy\core\_multiarray_umath.cp38-win_amd64.pyd) (3 samples, 3.80%)</title><rect x="0.0000%" y="148" width="3.7975%" height="15" fill="rgb(208,68,35)"/><text x="0.2500%" y="158.50">0x7f..</text></g><g><title>free_base (ucrtbase.dll) (3 samples, 3.80%)</title><rect x="0.0000%" y="164" width="3.7975%" height="15" fill="rgb(232,128,0)"/><text x="0.2500%" y="174.50">free..</text></g><g><title>RtlFreeHeap (ntdll.dll) (3 samples, 3.80%)</title><rect x="0.0000%" y="180" width="3.7975%" height="15" fill="rgb(207,160,47)"/><text x="0.2500%" y="190.50">RtlF..</text></g><g><title>RtlGetCurrentServiceSessionId (ntdll.dll) (3 samples, 3.80%)</title><rect x="0.0000%" y="196" width="3.7975%" height="15" fill="rgb(228,23,34)"/><text x="0.2500%" y="206.50">RtlG..</text></g><g><title>RtlGetCurrentServiceSessionId (ntdll.dll) (3 samples, 3.80%)</title><rect x="0.0000%" y="212" width="3.7975%" height="15" fill="rgb(218,30,26)"/><text x="0.2500%" y="222.50">RtlG..</text></g><g><title>RtlTryAcquirePebLock (ntdll.dll) (3 samples, 3.80%)</title><rect x="0.0000%" y="228" width="3.7975%" height="15" fill="rgb(220,122,19)"/><text x="0.2500%" y="238.50">RtlT..</text></g><g><title>NtFreeVirtualMemory (ntdll.dll) (3 samples, 3.80%)</title><rect x="0.0000%" y="244" width="3.7975%" height="15" fill="rgb(250,228,42)"/><text x="0.2500%" y="254.50">NtFr..</text></g><g><title>0x7ffbaff75de2 (pyopencl\_cl.cp38-win_amd64.pyd) (4 samples, 5.06%)</title><rect x="0.0000%" y="52" width="5.0633%" height="15" fill="rgb(240,193,28)"/><text x="0.2500%" y="62.50">0x7ffb..</text></g><g><title>0x7ffbaff75cf6 (pyopencl\_cl.cp38-win_amd64.pyd) (4 samples, 5.06%)</title><rect x="0.0000%" y="68" width="5.0633%" height="15" fill="rgb(216,20,37)"/><text x="0.2500%" y="78.50">0x7ffb..</text></g><g><title>0x7ffbaffa1ebf (pyopencl\_cl.cp38-win_amd64.pyd) (1 samples, 1.27%)</title><rect x="3.7975%" y="84" width="1.2658%" height="15" fill="rgb(206,188,39)"/><text x="4.0475%" y="94.50"></text></g><g><title>0x7ffbaff9363e (pyopencl\_cl.cp38-win_amd64.pyd) (1 samples, 1.27%)</title><rect x="3.7975%" y="100" width="1.2658%" height="15" fill="rgb(217,207,13)"/><text x="4.0475%" y="110.50"></text></g><g><title>0x7ffbaff934f1 (pyopencl\_cl.cp38-win_amd64.pyd) (1 samples, 1.27%)</title><rect x="3.7975%" y="116" width="1.2658%" height="15" fill="rgb(231,73,38)"/><text x="4.0475%" y="126.50"></text></g><g><title>clGetPlatformInfo (nvopencl64.dll) (1 samples, 1.27%)</title><rect x="3.7975%" y="132" width="1.2658%" height="15" fill="rgb(225,20,46)"/><text x="4.0475%" y="142.50"></text></g><g><title>0x7ffb9eab270e (nvopencl64.dll) (1 samples, 1.27%)</title><rect x="3.7975%" y="148" width="1.2658%" height="15" fill="rgb(210,31,41)"/><text x="4.0475%" y="158.50"></text></g><g><title>0x7ffb9eab2424 (nvopencl64.dll) (1 samples, 1.27%)</title><rect x="3.7975%" y="164" width="1.2658%" height="15" fill="rgb(221,200,47)"/><text x="4.0475%" y="174.50"></text></g><g><title>0x7ffb9eab22e3 (nvopencl64.dll) (1 samples, 1.27%)</title><rect x="3.7975%" y="180" width="1.2658%" height="15" fill="rgb(226,26,5)"/><text x="4.0475%" y="190.50"></text></g><g><title>clGetPlatformInfo (nvopencl64.dll) (1 samples, 1.27%)</title><rect x="3.7975%" y="196" width="1.2658%" height="15" fill="rgb(249,33,26)"/><text x="4.0475%" y="206.50"></text></g><g><title>clGetExportTable (nvopencl64.dll) (1 samples, 1.27%)</title><rect x="3.7975%" y="212" width="1.2658%" height="15" fill="rgb(235,183,28)"/><text x="4.0475%" y="222.50"></text></g><g><title>clGetExportTable (nvopencl64.dll) (1 samples, 1.27%)</title><rect x="3.7975%" y="228" width="1.2658%" height="15" fill="rgb(221,5,38)"/><text x="4.0475%" y="238.50"></text></g><g><title>clGetExportTable (nvopencl64.dll) (1 samples, 1.27%)</title><rect x="3.7975%" y="244" width="1.2658%" height="15" fill="rgb(247,18,42)"/><text x="4.0475%" y="254.50"></text></g><g><title>clGetExportTable (nvopencl64.dll) (1 samples, 1.27%)</title><rect x="3.7975%" y="260" width="1.2658%" height="15" fill="rgb(241,131,45)"/><text x="4.0475%" y="270.50"></text></g><g><title>clGetExportTable (nvopencl64.dll) (1 samples, 1.27%)</title><rect x="3.7975%" y="276" width="1.2658%" height="15" fill="rgb(249,31,29)"/><text x="4.0475%" y="286.50"></text></g><g><title>cuGetExportTable (nvopencl64.dll) (1 samples, 1.27%)</title><rect x="3.7975%" y="292" width="1.2658%" height="15" fill="rgb(225,111,53)"/><text x="4.0475%" y="302.50"></text></g><g><title>cuGetExportTable (nvopencl64.dll) (1 samples, 1.27%)</title><rect x="3.7975%" y="308" width="1.2658%" height="15" fill="rgb(238,160,17)"/><text x="4.0475%" y="318.50"></text></g><g><title>NtGdiDdDDIDestroyContext (win32u.dll) (1 samples, 1.27%)</title><rect x="3.7975%" y="324" width="1.2658%" height="15" fill="rgb(214,148,48)"/><text x="4.0475%" y="334.50"></text></g><g><title>clGetExportTable (nvopencl64.dll) (47 samples, 59.49%)</title><rect x="5.0633%" y="372" width="59.4937%" height="15" fill="rgb(232,36,49)"/><text x="5.3133%" y="382.50">clGetExportTable (nvopencl64.dll)</text></g><g><title>clGetExportTable (nvopencl64.dll) (47 samples, 59.49%)</title><rect x="5.0633%" y="388" width="59.4937%" height="15" fill="rgb(209,103,24)"/><text x="5.3133%" y="398.50">clGetExportTable (nvopencl64.dll)</text></g><g><title>clGetExportTable (nvopencl64.dll) (1 samples, 1.27%)</title><rect x="70.8861%" y="404" width="1.2658%" height="15" fill="rgb(229,88,8)"/><text x="71.1361%" y="414.50"></text></g><g><title>clGetExportTable (nvopencl64.dll) (1 samples, 1.27%)</title><rect x="70.8861%" y="420" width="1.2658%" height="15" fill="rgb(213,181,19)"/><text x="71.1361%" y="430.50"></text></g><g><title>cuGetExportTable (nvopencl64.dll) (1 samples, 1.27%)</title><rect x="70.8861%" y="436" width="1.2658%" height="15" fill="rgb(254,191,54)"/><text x="71.1361%" y="446.50"></text></g><g><title>cuGetExportTable (nvopencl64.dll) (1 samples, 1.27%)</title><rect x="70.8861%" y="452" width="1.2658%" height="15" fill="rgb(241,83,37)"/><text x="71.1361%" y="462.50"></text></g><g><title>cuGetExportTable (nvopencl64.dll) (1 samples, 1.27%)</title><rect x="70.8861%" y="468" width="1.2658%" height="15" fill="rgb(233,36,39)"/><text x="71.1361%" y="478.50"></text></g><g><title>cuGetExportTable (nvopencl64.dll) (1 samples, 1.27%)</title><rect x="70.8861%" y="484" width="1.2658%" height="15" fill="rgb(226,3,54)"/><text x="71.1361%" y="494.50"></text></g><g><title>cuGetExportTable (nvopencl64.dll) (1 samples, 1.27%)</title><rect x="70.8861%" y="500" width="1.2658%" height="15" fill="rgb(245,192,40)"/><text x="71.1361%" y="510.50"></text></g><g><title>NtGdiDdDDISubmitCommand (win32u.dll) (1 samples, 1.27%)</title><rect x="70.8861%" y="516" width="1.2658%" height="15" fill="rgb(238,167,29)"/><text x="71.1361%" y="526.50"></text></g><g><title>_get (pyopencl\array.py:714) (55 samples, 69.62%)</title><rect x="5.0633%" y="132" width="69.6203%" height="15" fill="rgb(232,182,51)"/><text x="5.3133%" y="142.50">_get (pyopencl\array.py:714)</text></g><g><title>enqueue_copy (pyopencl\__init__.py:1772) (55 samples, 69.62%)</title><rect x="5.0633%" y="148" width="69.6203%" height="15" fill="rgb(231,60,39)"/><text x="5.3133%" y="158.50">enqueue_copy (pyopencl\__init__.py:1772)</text></g><g><title>0x7ffbaff78fa9 (pyopencl\_cl.cp38-win_amd64.pyd) (55 samples, 69.62%)</title><rect x="5.0633%" y="164" width="69.6203%" height="15" fill="rgb(208,69,12)"/><text x="5.3133%" y="174.50">0x7ffbaff78fa9 (pyopencl\_cl.cp38-win_amd64.pyd)</text></g><g><title>0x7ffbaffa7fb4 (pyopencl\_cl.cp38-win_amd64.pyd) (55 samples, 69.62%)</title><rect x="5.0633%" y="180" width="69.6203%" height="15" fill="rgb(235,93,37)"/><text x="5.3133%" y="190.50">0x7ffbaffa7fb4 (pyopencl\_cl.cp38-win_amd64.pyd)</text></g><g><title>0x7ffbaffa7f38 (pyopencl\_cl.cp38-win_amd64.pyd) (55 samples, 69.62%)</title><rect x="5.0633%" y="196" width="69.6203%" height="15" fill="rgb(213,116,39)"/><text x="5.3133%" y="206.50">0x7ffbaffa7f38 (pyopencl\_cl.cp38-win_amd64.pyd)</text></g><g><title>0x7ffbaff94fbf (pyopencl\_cl.cp38-win_amd64.pyd) (55 samples, 69.62%)</title><rect x="5.0633%" y="212" width="69.6203%" height="15" fill="rgb(222,207,29)"/><text x="5.3133%" y="222.50">0x7ffbaff94fbf (pyopencl\_cl.cp38-win_amd64.pyd)</text></g><g><title>clGetPlatformInfo (nvopencl64.dll) (55 samples, 69.62%)</title><rect x="5.0633%" y="228" width="69.6203%" height="15" fill="rgb(206,96,30)"/><text x="5.3133%" y="238.50">clGetPlatformInfo (nvopencl64.dll)</text></g><g><title>clGetExtensionFunctionAddress (nvopencl64.dll) (55 samples, 69.62%)</title><rect x="5.0633%" y="244" width="69.6203%" height="15" fill="rgb(218,138,4)"/><text x="5.3133%" y="254.50">clGetExtensionFunctionAddress (nvopencl64.dll)</text></g><g><title>clGetExtensionFunctionAddress (nvopencl64.dll) (55 samples, 69.62%)</title><rect x="5.0633%" y="260" width="69.6203%" height="15" fill="rgb(250,191,14)"/><text x="5.3133%" y="270.50">clGetExtensionFunctionAddress (nvopencl64.dll)</text></g><g><title>clGetExtensionFunctionAddress (nvopencl64.dll) (55 samples, 69.62%)</title><rect x="5.0633%" y="276" width="69.6203%" height="15" fill="rgb(239,60,40)"/><text x="5.3133%" y="286.50">clGetExtensionFunctionAddress (nvopencl64.dll)</text></g><g><title>clGetPlatformInfo (nvopencl64.dll) (55 samples, 69.62%)</title><rect x="5.0633%" y="292" width="69.6203%" height="15" fill="rgb(206,27,48)"/><text x="5.3133%" y="302.50">clGetPlatformInfo (nvopencl64.dll)</text></g><g><title>clGetPlatformInfo (nvopencl64.dll) (55 samples, 69.62%)</title><rect x="5.0633%" y="308" width="69.6203%" height="15" fill="rgb(225,35,8)"/><text x="5.3133%" y="318.50">clGetPlatformInfo (nvopencl64.dll)</text></g><g><title>clGetExportTable (nvopencl64.dll) (55 samples, 69.62%)</title><rect x="5.0633%" y="324" width="69.6203%" height="15" fill="rgb(250,213,24)"/><text x="5.3133%" y="334.50">clGetExportTable (nvopencl64.dll)</text></g><g><title>cuGetExportTable (nvopencl64.dll) (55 samples, 69.62%)</title><rect x="5.0633%" y="340" width="69.6203%" height="15" fill="rgb(247,123,22)"/><text x="5.3133%" y="350.50">cuGetExportTable (nvopencl64.dll)</text></g><g><title>cuGetExportTable (nvopencl64.dll) (55 samples, 69.62%)</title><rect x="5.0633%" y="356" width="69.6203%" height="15" fill="rgb(231,138,38)"/><text x="5.3133%" y="366.50">cuGetExportTable (nvopencl64.dll)</text></g><g><title>cuGetExportTable (nvopencl64.dll) (8 samples, 10.13%)</title><rect x="64.5570%" y="372" width="10.1266%" height="15" fill="rgb(231,145,46)"/><text x="64.8070%" y="382.50">cuGetExportTabl..</text></g><g><title>cuGetExportTable (nvopencl64.dll) (4 samples, 5.06%)</title><rect x="69.6203%" y="388" width="5.0633%" height="15" fill="rgb(251,118,11)"/><text x="69.8703%" y="398.50">cuGetE..</text></g><g><title>cuGetExportTable (nvopencl64.dll) (2 samples, 2.53%)</title><rect x="72.1519%" y="404" width="2.5316%" height="15" fill="rgb(217,147,25)"/><text x="72.4019%" y="414.50">cu..</text></g><g><title>test (gpu_reikna_test.py:101) (58 samples, 73.42%)</title><rect x="5.0633%" y="84" width="73.4177%" height="15" fill="rgb(247,81,37)"/><text x="5.3133%" y="94.50">test (gpu_reikna_test.py:101)</text></g><g><title>get (reikna\cluda\ocl.py:65) (58 samples, 73.42%)</title><rect x="5.0633%" y="100" width="73.4177%" height="15" fill="rgb(209,12,38)"/><text x="5.3133%" y="110.50">get (reikna\cluda\ocl.py:65)</text></g><g><title>get (pyopencl\array.py:755) (58 samples, 73.42%)</title><rect x="5.0633%" y="116" width="73.4177%" height="15" fill="rgb(227,1,9)"/><text x="5.3133%" y="126.50">get (pyopencl\array.py:755)</text></g><g><title>_get (pyopencl\array.py:717) (3 samples, 3.80%)</title><rect x="74.6835%" y="132" width="3.7975%" height="15" fill="rgb(248,47,43)"/><text x="74.9335%" y="142.50">_get..</text></g><g><title>0x7ffbaff75de2 (pyopencl\_cl.cp38-win_amd64.pyd) (3 samples, 3.80%)</title><rect x="74.6835%" y="148" width="3.7975%" height="15" fill="rgb(221,10,30)"/><text x="74.9335%" y="158.50">0x7f..</text></g><g><title>0x7ffbaff75cf6 (pyopencl\_cl.cp38-win_amd64.pyd) (3 samples, 3.80%)</title><rect x="74.6835%" y="164" width="3.7975%" height="15" fill="rgb(210,229,1)"/><text x="74.9335%" y="174.50">0x7f..</text></g><g><title>0x7ffbaff8704e (pyopencl\_cl.cp38-win_amd64.pyd) (3 samples, 3.80%)</title><rect x="74.6835%" y="180" width="3.7975%" height="15" fill="rgb(222,148,37)"/><text x="74.9335%" y="190.50">0x7f..</text></g><g><title>0x7ffbaff91a34 (pyopencl\_cl.cp38-win_amd64.pyd) (3 samples, 3.80%)</title><rect x="74.6835%" y="196" width="3.7975%" height="15" fill="rgb(234,67,33)"/><text x="74.9335%" y="206.50">0x7f..</text></g><g><title>0x7ffbaff8ade9 (pyopencl\_cl.cp38-win_amd64.pyd) (3 samples, 3.80%)</title><rect x="74.6835%" y="212" width="3.7975%" height="15" fill="rgb(247,98,35)"/><text x="74.9335%" y="222.50">0x7f..</text></g><g><title>0x7ffbad5e5f5e (numpy\core\_multiarray_umath.cp38-win_amd64.pyd) (3 samples, 3.80%)</title><rect x="74.6835%" y="228" width="3.7975%" height="15" fill="rgb(247,138,52)"/><text x="74.9335%" y="238.50">0x7f..</text></g><g><title>0x7ffbad5e2200 (numpy\core\_multiarray_umath.cp38-win_amd64.pyd) (3 samples, 3.80%)</title><rect x="74.6835%" y="244" width="3.7975%" height="15" fill="rgb(213,79,30)"/><text x="74.9335%" y="254.50">0x7f..</text></g><g><title>free_base (ucrtbase.dll) (3 samples, 3.80%)</title><rect x="74.6835%" y="260" width="3.7975%" height="15" fill="rgb(246,177,23)"/><text x="74.9335%" y="270.50">free..</text></g><g><title>RtlFreeHeap (ntdll.dll) (3 samples, 3.80%)</title><rect x="74.6835%" y="276" width="3.7975%" height="15" fill="rgb(230,62,27)"/><text x="74.9335%" y="286.50">RtlF..</text></g><g><title>RtlGetCurrentServiceSessionId (ntdll.dll) (3 samples, 3.80%)</title><rect x="74.6835%" y="292" width="3.7975%" height="15" fill="rgb(216,154,8)"/><text x="74.9335%" y="302.50">RtlG..</text></g><g><title>RtlGetCurrentServiceSessionId (ntdll.dll) (3 samples, 3.80%)</title><rect x="74.6835%" y="308" width="3.7975%" height="15" fill="rgb(244,35,45)"/><text x="74.9335%" y="318.50">RtlG..</text></g><g><title>RtlTryAcquirePebLock (ntdll.dll) (3 samples, 3.80%)</title><rect x="74.6835%" y="324" width="3.7975%" height="15" fill="rgb(251,115,12)"/><text x="74.9335%" y="334.50">RtlT..</text></g><g><title>NtFreeVirtualMemory (ntdll.dll) (3 samples, 3.80%)</title><rect x="74.6835%" y="340" width="3.7975%" height="15" fill="rgb(240,54,50)"/><text x="74.9335%" y="350.50">NtFr..</text></g><g><title>enqueue_copy (pyopencl\__init__.py:1710) (1 samples, 1.27%)</title><rect x="78.4810%" y="132" width="1.2658%" height="15" fill="rgb(233,84,52)"/><text x="78.7310%" y="142.50"></text></g><g><title>result (pyopencl\__init__.py:1342) (1 samples, 1.27%)</title><rect x="78.4810%" y="148" width="1.2658%" height="15" fill="rgb(207,117,47)"/><text x="78.7310%" y="158.50"></text></g><g><title>0x7ffbaff78fa9 (pyopencl\_cl.cp38-win_amd64.pyd) (1 samples, 1.27%)</title><rect x="78.4810%" y="164" width="1.2658%" height="15" fill="rgb(249,43,39)"/><text x="78.7310%" y="174.50"></text></g><g><title>0x7ffbaffa7264 (pyopencl\_cl.cp38-win_amd64.pyd) (1 samples, 1.27%)</title><rect x="78.4810%" y="180" width="1.2658%" height="15" fill="rgb(209,38,44)"/><text x="78.7310%" y="190.50"></text></g><g><title>0x7ffbaffa71fd (pyopencl\_cl.cp38-win_amd64.pyd) (1 samples, 1.27%)</title><rect x="78.4810%" y="196" width="1.2658%" height="15" fill="rgb(236,212,23)"/><text x="78.7310%" y="206.50"></text></g><g><title>0x7ffbaffa9116 (pyopencl\_cl.cp38-win_amd64.pyd) (1 samples, 1.27%)</title><rect x="78.4810%" y="212" width="1.2658%" height="15" fill="rgb(242,79,21)"/><text x="78.7310%" y="222.50"></text></g><g><title>0x7ffbaffaad13 (pyopencl\_cl.cp38-win_amd64.pyd) (1 samples, 1.27%)</title><rect x="78.4810%" y="228" width="1.2658%" height="15" fill="rgb(211,96,35)"/><text x="78.7310%" y="238.50"></text></g><g><title>0x7ffbaffa3848 (pyopencl\_cl.cp38-win_amd64.pyd) (1 samples, 1.27%)</title><rect x="78.4810%" y="244" width="1.2658%" height="15" fill="rgb(253,215,40)"/><text x="78.7310%" y="254.50"></text></g><g><title>0x7ffbaff9ac28 (pyopencl\_cl.cp38-win_amd64.pyd) (1 samples, 1.27%)</title><rect x="78.4810%" y="260" width="1.2658%" height="15" fill="rgb(211,81,21)"/><text x="78.7310%" y="270.50"></text></g><g><title>clGetPlatformInfo (nvopencl64.dll) (1 samples, 1.27%)</title><rect x="78.4810%" y="276" width="1.2658%" height="15" fill="rgb(208,190,38)"/><text x="78.7310%" y="286.50"></text></g><g><title>clGetExportTable (nvopencl64.dll) (7 samples, 8.86%)</title><rect x="79.7468%" y="340" width="8.8608%" height="15" fill="rgb(235,213,38)"/><text x="79.9968%" y="350.50">clGetExportTa..</text></g><g><title>clGetExportTable (nvopencl64.dll) (7 samples, 8.86%)</title><rect x="79.7468%" y="356" width="8.8608%" height="15" fill="rgb(237,122,38)"/><text x="79.9968%" y="366.50">clGetExportTa..</text></g><g><title>RtlQueryPerformanceCounter (ntdll.dll) (2 samples, 2.53%)</title><rect x="91.1392%" y="356" width="2.5316%" height="15" fill="rgb(244,218,35)"/><text x="91.3892%" y="366.50">Rt..</text></g><g><title>reikna_fft (gpu_reikna_test.py:32) (14 samples, 17.72%)</title><rect x="78.4810%" y="100" width="17.7215%" height="15" fill="rgb(240,68,47)"/><text x="78.7310%" y="110.50">reikna_fft (gpu_reikna_test...</text></g><g><title>set (pyopencl\array.py:664) (14 samples, 17.72%)</title><rect x="78.4810%" y="116" width="17.7215%" height="15" fill="rgb(210,16,53)"/><text x="78.7310%" y="126.50">set (pyopencl\array.py:664)</text></g><g><title>enqueue_copy (pyopencl\__init__.py:1729) (13 samples, 16.46%)</title><rect x="79.7468%" y="132" width="16.4557%" height="15" fill="rgb(235,124,12)"/><text x="79.9968%" y="142.50">enqueue_copy (pyopencl\__..</text></g><g><title>0x7ffbaff78fa9 (pyopencl\_cl.cp38-win_amd64.pyd) (13 samples, 16.46%)</title><rect x="79.7468%" y="148" width="16.4557%" height="15" fill="rgb(224,169,11)"/><text x="79.9968%" y="158.50">0x7ffbaff78fa9 (pyopencl\..</text></g><g><title>0x7ffbaffa7fb4 (pyopencl\_cl.cp38-win_amd64.pyd) (13 samples, 16.46%)</title><rect x="79.7468%" y="164" width="16.4557%" height="15" fill="rgb(250,166,2)"/><text x="79.9968%" y="174.50">0x7ffbaffa7fb4 (pyopencl\..</text></g><g><title>0x7ffbaffa7f38 (pyopencl\_cl.cp38-win_amd64.pyd) (13 samples, 16.46%)</title><rect x="79.7468%" y="180" width="16.4557%" height="15" fill="rgb(242,216,29)"/><text x="79.9968%" y="190.50">0x7ffbaffa7f38 (pyopencl\..</text></g><g><title>0x7ffbaff957af (pyopencl\_cl.cp38-win_amd64.pyd) (13 samples, 16.46%)</title><rect x="79.7468%" y="196" width="16.4557%" height="15" fill="rgb(230,116,27)"/><text x="79.9968%" y="206.50">0x7ffbaff957af (pyopencl\..</text></g><g><title>clGetPlatformInfo (nvopencl64.dll) (13 samples, 16.46%)</title><rect x="79.7468%" y="212" width="16.4557%" height="15" fill="rgb(228,99,48)"/><text x="79.9968%" y="222.50">clGetPlatformInfo (nvopen..</text></g><g><title>clGetExtensionFunctionAddress (nvopencl64.dll) (13 samples, 16.46%)</title><rect x="79.7468%" y="228" width="16.4557%" height="15" fill="rgb(253,11,6)"/><text x="79.9968%" y="238.50">clGetExtensionFunctionAdd..</text></g><g><title>clGetExtensionFunctionAddress (nvopencl64.dll) (13 samples, 16.46%)</title><rect x="79.7468%" y="244" width="16.4557%" height="15" fill="rgb(247,143,39)"/><text x="79.9968%" y="254.50">clGetExtensionFunctionAdd..</text></g><g><title>clGetExtensionFunctionAddress (nvopencl64.dll) (13 samples, 16.46%)</title><rect x="79.7468%" y="260" width="16.4557%" height="15" fill="rgb(236,97,10)"/><text x="79.9968%" y="270.50">clGetExtensionFunctionAdd..</text></g><g><title>clGetPlatformInfo (nvopencl64.dll) (13 samples, 16.46%)</title><rect x="79.7468%" y="276" width="16.4557%" height="15" fill="rgb(233,208,19)"/><text x="79.9968%" y="286.50">clGetPlatformInfo (nvopen..</text></g><g><title>clGetPlatformInfo (nvopencl64.dll) (13 samples, 16.46%)</title><rect x="79.7468%" y="292" width="16.4557%" height="15" fill="rgb(216,164,2)"/><text x="79.9968%" y="302.50">clGetPlatformInfo (nvopen..</text></g><g><title>clGetExportTable (nvopencl64.dll) (13 samples, 16.46%)</title><rect x="79.7468%" y="308" width="16.4557%" height="15" fill="rgb(220,129,5)"/><text x="79.9968%" y="318.50">clGetExportTable (nvopenc..</text></g><g><title>cuGetExportTable (nvopencl64.dll) (13 samples, 16.46%)</title><rect x="79.7468%" y="324" width="16.4557%" height="15" fill="rgb(242,17,10)"/><text x="79.9968%" y="334.50">cuGetExportTable (nvopenc..</text></g><g><title>cuGetExportTable (nvopencl64.dll) (6 samples, 7.59%)</title><rect x="88.6076%" y="340" width="7.5949%" height="15" fill="rgb(242,107,0)"/><text x="88.8576%" y="350.50">cuGetExpor..</text></g><g><title>cuGetExportTable (nvopencl64.dll) (2 samples, 2.53%)</title><rect x="93.6709%" y="356" width="2.5316%" height="15" fill="rgb(251,28,31)"/><text x="93.9209%" y="366.50">cu..</text></g><g><title>clGetExportTable (nvopencl64.dll) (2 samples, 2.53%)</title><rect x="93.6709%" y="372" width="2.5316%" height="15" fill="rgb(233,223,10)"/><text x="93.9209%" y="382.50">cl..</text></g><g><title>clGetExportTable (nvopencl64.dll) (2 samples, 2.53%)</title><rect x="93.6709%" y="388" width="2.5316%" height="15" fill="rgb(215,21,27)"/><text x="93.9209%" y="398.50">cl..</text></g><g><title>cuGetExportTable (nvopencl64.dll) (2 samples, 2.53%)</title><rect x="93.6709%" y="404" width="2.5316%" height="15" fill="rgb(232,23,21)"/><text x="93.9209%" y="414.50">cu..</text></g><g><title>cuGetExportTable (nvopencl64.dll) (2 samples, 2.53%)</title><rect x="93.6709%" y="420" width="2.5316%" height="15" fill="rgb(244,5,23)"/><text x="93.9209%" y="430.50">cu..</text></g><g><title>cuGetExportTable (nvopencl64.dll) (2 samples, 2.53%)</title><rect x="93.6709%" y="436" width="2.5316%" height="15" fill="rgb(226,81,46)"/><text x="93.9209%" y="446.50">cu..</text></g><g><title>cuGetExportTable (nvopencl64.dll) (2 samples, 2.53%)</title><rect x="93.6709%" y="452" width="2.5316%" height="15" fill="rgb(247,70,30)"/><text x="93.9209%" y="462.50">cu..</text></g><g><title>cuGetExportTable (nvopencl64.dll) (2 samples, 2.53%)</title><rect x="93.6709%" y="468" width="2.5316%" height="15" fill="rgb(212,68,19)"/><text x="93.9209%" y="478.50">cu..</text></g><g><title>NtGdiDdDDISubmitCommand (win32u.dll) (2 samples, 2.53%)</title><rect x="93.6709%" y="484" width="2.5316%" height="15" fill="rgb(240,187,13)"/><text x="93.9209%" y="494.50">Nt..</text></g><g><title>test (gpu_reikna_test.py:96) (15 samples, 18.99%)</title><rect x="78.4810%" y="84" width="18.9873%" height="15" fill="rgb(223,113,26)"/><text x="78.7310%" y="94.50">test (gpu_reikna_test.py:96)</text></g><g><title>reikna_fft (gpu_reikna_test.py:35) (1 samples, 1.27%)</title><rect x="96.2025%" y="100" width="1.2658%" height="15" fill="rgb(206,192,2)"/><text x="96.4525%" y="110.50"></text></g><g><title>__call__ (reikna\core\computation.py:629) (1 samples, 1.27%)</title><rect x="96.2025%" y="116" width="1.2658%" height="15" fill="rgb(241,108,4)"/><text x="96.4525%" y="126.50"></text></g><g><title>__call__ (reikna\core\computation.py:645) (1 samples, 1.27%)</title><rect x="96.2025%" y="132" width="1.2658%" height="15" fill="rgb(247,173,49)"/><text x="96.4525%" y="142.50"></text></g><g><title>__call__ (reikna\cluda\api.py:816) (1 samples, 1.27%)</title><rect x="96.2025%" y="148" width="1.2658%" height="15" fill="rgb(224,114,35)"/><text x="96.4525%" y="158.50"></text></g><g><title>__call__ (reikna\cluda\api.py:731) (1 samples, 1.27%)</title><rect x="96.2025%" y="164" width="1.2658%" height="15" fill="rgb(245,159,27)"/><text x="96.4525%" y="174.50"></text></g><g><title>prepared_call (reikna\cluda\api.py:715) (1 samples, 1.27%)</title><rect x="96.2025%" y="180" width="1.2658%" height="15" fill="rgb(245,172,44)"/><text x="96.4525%" y="190.50"></text></g><g><title>_prepared_call (reikna\cluda\ocl.py:227) (1 samples, 1.27%)</title><rect x="96.2025%" y="196" width="1.2658%" height="15" fill="rgb(236,23,11)"/><text x="96.4525%" y="206.50"></text></g><g><title>kernel_call (pyopencl\__init__.py:880) (1 samples, 1.27%)</title><rect x="96.2025%" y="212" width="1.2658%" height="15" fill="rgb(205,117,38)"/><text x="96.4525%" y="222.50"></text></g><g><title>enqueue_knl_kernel_fft (&lt;generated code&gt;:15) (1 samples, 1.27%)</title><rect x="96.2025%" y="228" width="1.2658%" height="15" fill="rgb(237,72,25)"/><text x="96.4525%" y="238.50"></text></g><g><title>&lt;module&gt; (test_driver.py:74) (74 samples, 93.67%)</title><rect x="5.0633%" y="52" width="93.6709%" height="15" fill="rgb(244,70,9)"/><text x="5.3133%" y="62.50">&lt;module&gt; (test_driver.py:74)</text></g><g><title>main (test_driver.py:65) (74 samples, 93.67%)</title><rect x="5.0633%" y="68" width="93.6709%" height="15" fill="rgb(217,125,39)"/><text x="5.3133%" y="78.50">main (test_driver.py:65)</text></g><g><title>test (gpu_reikna_test.py:99) (1 samples, 1.27%)</title><rect x="97.4684%" y="84" width="1.2658%" height="15" fill="rgb(235,36,10)"/><text x="97.7184%" y="94.50"></text></g><g><title>0x7ffbaff78fa9 (pyopencl\_cl.cp38-win_amd64.pyd) (1 samples, 1.27%)</title><rect x="97.4684%" y="100" width="1.2658%" height="15" fill="rgb(251,123,47)"/><text x="97.7184%" y="110.50"></text></g><g><title>0x7ffbaffa6404 (pyopencl\_cl.cp38-win_amd64.pyd) (1 samples, 1.27%)</title><rect x="97.4684%" y="116" width="1.2658%" height="15" fill="rgb(221,13,13)"/><text x="97.7184%" y="126.50"></text></g><g><title>0x7ffbaffa63a1 (pyopencl\_cl.cp38-win_amd64.pyd) (1 samples, 1.27%)</title><rect x="97.4684%" y="132" width="1.2658%" height="15" fill="rgb(238,131,9)"/><text x="97.7184%" y="142.50"></text></g><g><title>0x7ffbaff9129c (pyopencl\_cl.cp38-win_amd64.pyd) (1 samples, 1.27%)</title><rect x="97.4684%" y="148" width="1.2658%" height="15" fill="rgb(211,50,8)"/><text x="97.7184%" y="158.50"></text></g><g><title>clGetPlatformInfo (nvopencl64.dll) (1 samples, 1.27%)</title><rect x="97.4684%" y="164" width="1.2658%" height="15" fill="rgb(245,182,24)"/><text x="97.7184%" y="174.50"></text></g><g><title>cuGetExportTable (nvopencl64.dll) (1 samples, 1.27%)</title><rect x="97.4684%" y="180" width="1.2658%" height="15" fill="rgb(242,14,37)"/><text x="97.7184%" y="190.50"></text></g><g><title>all (79 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(246,228,12)"/><text x="0.2500%" y="46.50"></text></g><g><title>free_base (ucrtbase.dll) (1 samples, 1.27%)</title><rect x="98.7342%" y="52" width="1.2658%" height="15" fill="rgb(213,55,15)"/><text x="98.9842%" y="62.50"></text></g><g><title>RtlFreeHeap (ntdll.dll) (1 samples, 1.27%)</title><rect x="98.7342%" y="68" width="1.2658%" height="15" fill="rgb(209,9,3)"/><text x="98.9842%" y="78.50"></text></g><g><title>RtlGetCurrentServiceSessionId (ntdll.dll) (1 samples, 1.27%)</title><rect x="98.7342%" y="84" width="1.2658%" height="15" fill="rgb(230,59,30)"/><text x="98.9842%" y="94.50"></text></g><g><title>RtlGetCurrentServiceSessionId (ntdll.dll) (1 samples, 1.27%)</title><rect x="98.7342%" y="100" width="1.2658%" height="15" fill="rgb(209,121,21)"/><text x="98.9842%" y="110.50"></text></g><g><title>RtlReAllocateHeap (ntdll.dll) (1 samples, 1.27%)</title><rect x="98.7342%" y="116" width="1.2658%" height="15" fill="rgb(220,109,13)"/><text x="98.9842%" y="126.50"></text></g><g><title>RtlTryAcquirePebLock (ntdll.dll) (1 samples, 1.27%)</title><rect x="98.7342%" y="132" width="1.2658%" height="15" fill="rgb(232,18,1)"/><text x="98.9842%" y="142.50"></text></g><g><title>RtlTryAcquirePebLock (ntdll.dll) (1 samples, 1.27%)</title><rect x="98.7342%" y="148" width="1.2658%" height="15" fill="rgb(215,41,42)"/><text x="98.9842%" y="158.50"></text></g><g><title>RtlTryAcquirePebLock (ntdll.dll) (1 samples, 1.27%)</title><rect x="98.7342%" y="164" width="1.2658%" height="15" fill="rgb(224,123,36)"/><text x="98.9842%" y="174.50"></text></g><g><title>NtFreeVirtualMemory (ntdll.dll) (1 samples, 1.27%)</title><rect x="98.7342%" y="180" width="1.2658%" height="15" fill="rgb(240,125,3)"/><text x="98.9842%" y="190.50"></text></g></svg></svg>