<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="389.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="389.00"> </text><svg id="frames" x="10" width="1180"><g><title>_var (numpy\core\_methods.py:183) (2,282 samples, 1.22%)</title><rect x="1.7073%" y="260" width="1.2160%" height="15" fill="rgb(227,0,7)"/><text x="1.9573%" y="270.50"></text></g><g><title>_std (numpy\core\_methods.py:216) (7,294 samples, 3.89%)</title><rect x="1.1952%" y="244" width="3.8867%" height="15" fill="rgb(217,0,24)"/><text x="1.4452%" y="254.50">_std..</text></g><g><title>std (numpy\core\fromnumeric.py:3458) (7,843 samples, 4.18%)</title><rect x="1.0678%" y="228" width="4.1792%" height="15" fill="rgb(221,193,54)"/><text x="1.3178%" y="238.50">std (..</text></g><g><title>std (&lt;__array_function__ internals&gt;:5) (8,044 samples, 4.29%)</title><rect x="0.9613%" y="212" width="4.2863%" height="15" fill="rgb(248,212,6)"/><text x="1.2113%" y="222.50">std (..</text></g><g><title>fastNormXCorr (dvc_impl.py:224) (8,268 samples, 4.41%)</title><rect x="0.8499%" y="196" width="4.4057%" height="15" fill="rgb(208,68,35)"/><text x="1.0999%" y="206.50">fastN..</text></g><g><title>uniform_filter1d (scipy\ndimage\filters.py:793) (31,828 samples, 16.96%)</title><rect x="9.1401%" y="244" width="16.9597%" height="15" fill="rgb(232,128,0)"/><text x="9.3901%" y="254.50">uniform_filter1d (scipy\nd..</text></g><g><title>uniform_filter (scipy\ndimage\filters.py:852) (33,371 samples, 17.78%)</title><rect x="8.3216%" y="228" width="17.7819%" height="15" fill="rgb(207,160,47)"/><text x="8.5716%" y="238.50">uniform_filter (scipy\ndimag..</text></g><g><title>windowMeanStd (dvc_impl.py:128) (35,613 samples, 18.98%)</title><rect x="7.1328%" y="212" width="18.9766%" height="15" fill="rgb(228,23,34)"/><text x="7.3828%" y="222.50">windowMeanStd (dvc_impl.py:128)</text></g><g><title>uniform_filter1d (scipy\ndimage\filters.py:793) (27,818 samples, 14.82%)</title><rect x="27.9552%" y="244" width="14.8230%" height="15" fill="rgb(218,30,26)"/><text x="28.2052%" y="254.50">uniform_filter1d (scipy..</text></g><g><title>uniform_filter (scipy\ndimage\filters.py:852) (29,088 samples, 15.50%)</title><rect x="27.2822%" y="228" width="15.4997%" height="15" fill="rgb(220,122,19)"/><text x="27.5322%" y="238.50">uniform_filter (scipy\nd..</text></g><g><title>windowMeanStd (dvc_impl.py:129) (31,308 samples, 16.68%)</title><rect x="26.1094%" y="212" width="16.6827%" height="15" fill="rgb(250,228,42)"/><text x="26.3594%" y="222.50">windowMeanStd (dvc_impl.py..</text></g><g><title>windowMeanStd (dvc_impl.py:130) (3,826 samples, 2.04%)</title><rect x="42.7921%" y="212" width="2.0387%" height="15" fill="rgb(240,193,28)"/><text x="43.0421%" y="222.50">w..</text></g><g><title>windowMeanStd (dvc_impl.py:132) (2,623 samples, 1.40%)</title><rect x="44.9368%" y="212" width="1.3977%" height="15" fill="rgb(216,20,37)"/><text x="45.1868%" y="222.50"></text></g><g><title>fastNormXCorr (dvc_impl.py:237) (73,837 samples, 39.34%)</title><rect x="7.0039%" y="196" width="39.3445%" height="15" fill="rgb(206,188,39)"/><text x="7.2539%" y="206.50">fastNormXCorr (dvc_impl.py:237)</text></g><g><title>pad (numpy\lib\arraypad.py:748) (2,651 samples, 1.41%)</title><rect x="49.8337%" y="244" width="1.4126%" height="15" fill="rgb(217,207,13)"/><text x="50.0837%" y="254.50"></text></g><g><title>pad (&lt;__array_function__ internals&gt;:5) (7,229 samples, 3.85%)</title><rect x="49.4650%" y="228" width="3.8520%" height="15" fill="rgb(231,73,38)"/><text x="49.7150%" y="238.50">pad ..</text></g><g><title>correlate_gpu (dvc_impl.py:203) (7,371 samples, 3.93%)</title><rect x="49.3899%" y="212" width="3.9277%" height="15" fill="rgb(225,20,46)"/><text x="49.6399%" y="222.50">corr..</text></g><g><title>pad (&lt;__array_function__ internals&gt;:5) (5,617 samples, 2.99%)</title><rect x="53.3554%" y="228" width="2.9931%" height="15" fill="rgb(210,31,41)"/><text x="53.6054%" y="238.50">pad..</text></g><g><title>correlate_gpu (dvc_impl.py:204) (5,692 samples, 3.03%)</title><rect x="53.3176%" y="212" width="3.0330%" height="15" fill="rgb(221,200,47)"/><text x="53.5676%" y="222.50">cor..</text></g><g><title>empty_like (reikna\cluda\api.py:432) (2,456 samples, 1.31%)</title><rect x="56.4811%" y="260" width="1.3087%" height="15" fill="rgb(226,26,5)"/><text x="56.7311%" y="270.50"></text></g><g><title>to_device (reikna\cluda\api.py:443) (2,627 samples, 1.40%)</title><rect x="56.4001%" y="244" width="1.3998%" height="15" fill="rgb(249,33,26)"/><text x="56.6501%" y="254.50"></text></g><g><title>set (pyopencl\array.py:664) (3,329 samples, 1.77%)</title><rect x="58.0616%" y="276" width="1.7739%" height="15" fill="rgb(235,183,28)"/><text x="58.3116%" y="286.50">s..</text></g><g><title>enqueue_copy (pyopencl\__init__.py:1729) (2,823 samples, 1.50%)</title><rect x="58.3312%" y="292" width="1.5043%" height="15" fill="rgb(221,5,38)"/><text x="58.5812%" y="302.50"></text></g><g><title>to_device (reikna\cluda\api.py:447) (3,941 samples, 2.10%)</title><rect x="57.7999%" y="244" width="2.1000%" height="15" fill="rgb(247,18,42)"/><text x="58.0499%" y="254.50">t..</text></g><g><title>_copy_array (reikna\cluda\ocl.py:114) (3,911 samples, 2.08%)</title><rect x="57.8159%" y="260" width="2.0840%" height="15" fill="rgb(241,131,45)"/><text x="58.0659%" y="270.50">_..</text></g><g><title>_reikna_fft (dvc_impl.py:167) (6,672 samples, 3.56%)</title><rect x="56.3698%" y="228" width="3.5552%" height="15" fill="rgb(249,31,29)"/><text x="56.6198%" y="238.50">_rei..</text></g><g><title>enqueue_knl_kernel_fft (&lt;generated code&gt;:68) (1,988 samples, 1.06%)</title><rect x="62.9788%" y="356" width="1.0593%" height="15" fill="rgb(225,111,53)"/><text x="63.2288%" y="366.50"></text></g><g><title>prepared_call (reikna\cluda\api.py:715) (5,346 samples, 2.85%)</title><rect x="61.3376%" y="308" width="2.8486%" height="15" fill="rgb(238,160,17)"/><text x="61.5876%" y="318.50">pr..</text></g><g><title>_prepared_call (reikna\cluda\ocl.py:227) (4,956 samples, 2.64%)</title><rect x="61.5454%" y="324" width="2.6408%" height="15" fill="rgb(214,148,48)"/><text x="61.7954%" y="334.50">_p..</text></g><g><title>kernel_call (pyopencl\__init__.py:880) (4,710 samples, 2.51%)</title><rect x="61.6765%" y="340" width="2.5098%" height="15" fill="rgb(232,36,49)"/><text x="61.9265%" y="350.50">ke..</text></g><g><title>__call__ (reikna\core\computation.py:645) (5,729 samples, 3.05%)</title><rect x="61.1793%" y="260" width="3.0527%" height="15" fill="rgb(209,103,24)"/><text x="61.4293%" y="270.50">__c..</text></g><g><title>__call__ (reikna\cluda\api.py:816) (5,606 samples, 2.99%)</title><rect x="61.2449%" y="276" width="2.9872%" height="15" fill="rgb(229,88,8)"/><text x="61.4949%" y="286.50">__c..</text></g><g><title>__call__ (reikna\cluda\api.py:731) (5,495 samples, 2.93%)</title><rect x="61.3040%" y="292" width="2.9280%" height="15" fill="rgb(213,181,19)"/><text x="61.5540%" y="302.50">__..</text></g><g><title>__call__ (reikna\core\computation.py:629) (6,120 samples, 3.26%)</title><rect x="61.0418%" y="244" width="3.2611%" height="15" fill="rgb(254,191,54)"/><text x="61.2918%" y="254.50">__c..</text></g><g><title>_reikna_fft (dvc_impl.py:169) (8,219 samples, 4.38%)</title><rect x="59.9250%" y="228" width="4.3795%" height="15" fill="rgb(241,83,37)"/><text x="60.1750%" y="238.50">_reik..</text></g><g><title>correlate_gpu (dvc_impl.py:206) (14,929 samples, 7.96%)</title><rect x="56.3506%" y="212" width="7.9550%" height="15" fill="rgb(233,36,39)"/><text x="56.6006%" y="222.50">correlate_g..</text></g><g><title>empty_like (reikna\cluda\api.py:432) (1,947 samples, 1.04%)</title><rect x="64.4042%" y="260" width="1.0375%" height="15" fill="rgb(226,3,54)"/><text x="64.6542%" y="270.50"></text></g><g><title>to_device (reikna\cluda\api.py:443) (2,091 samples, 1.11%)</title><rect x="64.3418%" y="244" width="1.1142%" height="15" fill="rgb(245,192,40)"/><text x="64.5918%" y="254.50"></text></g><g><title>set (pyopencl\array.py:664) (9,516 samples, 5.07%)</title><rect x="65.6947%" y="276" width="5.0707%" height="15" fill="rgb(238,167,29)"/><text x="65.9447%" y="286.50">set (p..</text></g><g><title>enqueue_copy (pyopencl\__init__.py:1729) (9,119 samples, 4.86%)</title><rect x="65.9063%" y="292" width="4.8591%" height="15" fill="rgb(232,182,51)"/><text x="66.1563%" y="302.50">enqueu..</text></g><g><title>to_device (reikna\cluda\api.py:447) (10,068 samples, 5.36%)</title><rect x="65.4560%" y="244" width="5.3648%" height="15" fill="rgb(231,60,39)"/><text x="65.7060%" y="254.50">to_devi..</text></g><g><title>_copy_array (reikna\cluda\ocl.py:114) (10,039 samples, 5.35%)</title><rect x="65.4715%" y="260" width="5.3493%" height="15" fill="rgb(208,69,12)"/><text x="65.7215%" y="270.50">_copy_a..</text></g><g><title>_reikna_fft (dvc_impl.py:167) (12,238 samples, 6.52%)</title><rect x="64.3200%" y="228" width="6.5211%" height="15" fill="rgb(235,93,37)"/><text x="64.5700%" y="238.50">_reikna_f..</text></g><g><title>prepared_call (reikna\cluda\api.py:715) (4,491 samples, 2.39%)</title><rect x="72.0373%" y="308" width="2.3931%" height="15" fill="rgb(213,116,39)"/><text x="72.2873%" y="318.50">pr..</text></g><g><title>_prepared_call (reikna\cluda\ocl.py:227) (4,158 samples, 2.22%)</title><rect x="72.2148%" y="324" width="2.2156%" height="15" fill="rgb(222,207,29)"/><text x="72.4648%" y="334.50">_..</text></g><g><title>kernel_call (pyopencl\__init__.py:880) (3,954 samples, 2.11%)</title><rect x="72.3235%" y="340" width="2.1069%" height="15" fill="rgb(206,96,30)"/><text x="72.5735%" y="350.50">k..</text></g><g><title>__call__ (reikna\core\computation.py:645) (4,826 samples, 2.57%)</title><rect x="71.9009%" y="260" width="2.5716%" height="15" fill="rgb(218,138,4)"/><text x="72.1509%" y="270.50">__..</text></g><g><title>__call__ (reikna\cluda\api.py:816) (4,717 samples, 2.51%)</title><rect x="71.9590%" y="276" width="2.5135%" height="15" fill="rgb(250,191,14)"/><text x="72.2090%" y="286.50">__..</text></g><g><title>__call__ (reikna\cluda\api.py:731) (4,636 samples, 2.47%)</title><rect x="72.0022%" y="292" width="2.4703%" height="15" fill="rgb(239,60,40)"/><text x="72.2522%" y="302.50">__..</text></g><g><title>__call__ (reikna\core\computation.py:629) (5,094 samples, 2.71%)</title><rect x="71.7975%" y="244" width="2.7144%" height="15" fill="rgb(206,27,48)"/><text x="72.0475%" y="254.50">__..</text></g><g><title>_reikna_fft (dvc_impl.py:169) (6,890 samples, 3.67%)</title><rect x="70.8411%" y="228" width="3.6714%" height="15" fill="rgb(225,35,8)"/><text x="71.0911%" y="238.50">_rei..</text></g><g><title>correlate_gpu (dvc_impl.py:207) (19,157 samples, 10.21%)</title><rect x="64.3056%" y="212" width="10.2079%" height="15" fill="rgb(250,213,24)"/><text x="64.5556%" y="222.50">correlate_gpu (..</text></g><g><title>__init__ (reikna\cluda\ocl.py:31) (2,322 samples, 1.24%)</title><rect x="74.6606%" y="276" width="1.2373%" height="15" fill="rgb(247,123,22)"/><text x="74.9106%" y="286.50"></text></g><g><title>array (reikna\cluda\ocl.py:106) (2,499 samples, 1.33%)</title><rect x="74.5881%" y="260" width="1.3316%" height="15" fill="rgb(231,138,38)"/><text x="74.8381%" y="270.50"></text></g><g><title>__mul__ (pyopencl\array.py:1101) (3,333 samples, 1.78%)</title><rect x="74.5412%" y="228" width="1.7760%" height="15" fill="rgb(231,145,46)"/><text x="74.7912%" y="238.50">_..</text></g><g><title>_new_like_me (reikna\cluda\ocl.py:46) (3,293 samples, 1.75%)</title><rect x="74.5625%" y="244" width="1.7547%" height="15" fill="rgb(251,118,11)"/><text x="74.8125%" y="254.50"></text></g><g><title>kernel_runner (pyopencl\array.py:166) (2,462 samples, 1.31%)</title><rect x="77.0115%" y="244" width="1.3119%" height="15" fill="rgb(217,147,25)"/><text x="77.2615%" y="254.50"></text></g><g><title>correlate_gpu (dvc_impl.py:212) (12,459 samples, 6.64%)</title><rect x="74.5135%" y="212" width="6.6389%" height="15" fill="rgb(247,81,37)"/><text x="74.7635%" y="222.50">correlate..</text></g><g><title>__mul__ (pyopencl\array.py:1104) (8,395 samples, 4.47%)</title><rect x="76.6790%" y="228" width="4.4733%" height="15" fill="rgb(209,12,38)"/><text x="76.9290%" y="238.50">__mul..</text></g><g><title>kernel_runner (pyopencl\array.py:196) (2,568 samples, 1.37%)</title><rect x="79.7840%" y="244" width="1.3684%" height="15" fill="rgb(227,1,9)"/><text x="80.0340%" y="254.50"></text></g><g><title>kernel_call (pyopencl\__init__.py:880) (2,427 samples, 1.29%)</title><rect x="79.8591%" y="260" width="1.2932%" height="15" fill="rgb(248,47,43)"/><text x="80.1091%" y="270.50"></text></g><g><title>prepared_call (reikna\cluda\api.py:715) (5,592 samples, 2.98%)</title><rect x="82.3763%" y="308" width="2.9797%" height="15" fill="rgb(221,10,30)"/><text x="82.6263%" y="318.50">pre..</text></g><g><title>_prepared_call (reikna\cluda\ocl.py:227) (5,148 samples, 2.74%)</title><rect x="82.6129%" y="324" width="2.7431%" height="15" fill="rgb(210,229,1)"/><text x="82.8629%" y="334.50">_p..</text></g><g><title>kernel_call (pyopencl\__init__.py:880) (4,880 samples, 2.60%)</title><rect x="82.7557%" y="340" width="2.6003%" height="15" fill="rgb(222,148,37)"/><text x="83.0057%" y="350.50">ke..</text></g><g><title>__call__ (reikna\core\computation.py:645) (6,071 samples, 3.23%)</title><rect x="82.1850%" y="260" width="3.2350%" height="15" fill="rgb(234,67,33)"/><text x="82.4350%" y="270.50">__c..</text></g><g><title>__call__ (reikna\cluda\api.py:816) (5,936 samples, 3.16%)</title><rect x="82.2570%" y="276" width="3.1630%" height="15" fill="rgb(247,98,35)"/><text x="82.5070%" y="286.50">__c..</text></g><g><title>__call__ (reikna\cluda\api.py:731) (5,798 samples, 3.09%)</title><rect x="82.3305%" y="292" width="3.0895%" height="15" fill="rgb(247,138,52)"/><text x="82.5805%" y="302.50">__c..</text></g><g><title>__call__ (reikna\core\computation.py:629) (6,444 samples, 3.43%)</title><rect x="82.0492%" y="244" width="3.4337%" height="15" fill="rgb(213,79,30)"/><text x="82.2992%" y="254.50">__c..</text></g><g><title>correlate_gpu (dvc_impl.py:214) (8,128 samples, 4.33%)</title><rect x="81.1524%" y="212" width="4.3311%" height="15" fill="rgb(246,177,23)"/><text x="81.4024%" y="222.50">corre..</text></g><g><title>_reikna_fft (dvc_impl.py:169) (8,094 samples, 4.31%)</title><rect x="81.1705%" y="228" width="4.3129%" height="15" fill="rgb(230,62,27)"/><text x="81.4205%" y="238.50">_reik..</text></g><g><title>_get (pyopencl\array.py:714) (15,009 samples, 8.00%)</title><rect x="85.9843%" y="260" width="7.9976%" height="15" fill="rgb(216,154,8)"/><text x="86.2343%" y="270.50">_get (pyope..</text></g><g><title>enqueue_copy (pyopencl\__init__.py:1772) (14,576 samples, 7.77%)</title><rect x="86.2150%" y="276" width="7.7669%" height="15" fill="rgb(244,35,45)"/><text x="86.4650%" y="286.50">enqueue_cop..</text></g><g><title>correlate_gpu (dvc_impl.py:217) (16,063 samples, 8.56%)</title><rect x="85.4834%" y="212" width="8.5593%" height="15" fill="rgb(251,115,12)"/><text x="85.7334%" y="222.50">correlate_gp..</text></g><g><title>get (reikna\cluda\ocl.py:65) (15,692 samples, 8.36%)</title><rect x="85.6811%" y="228" width="8.3616%" height="15" fill="rgb(240,54,50)"/><text x="85.9311%" y="238.50">get (reikna\..</text></g><g><title>get (pyopencl\array.py:755) (15,617 samples, 8.32%)</title><rect x="85.7211%" y="244" width="8.3216%" height="15" fill="rgb(233,84,52)"/><text x="85.9711%" y="254.50">get (pyopenc..</text></g><g><title>fastNormXCorr (dvc_impl.py:243) (90,260 samples, 48.10%)</title><rect x="46.3675%" y="196" width="48.0956%" height="15" fill="rgb(207,117,47)"/><text x="46.6175%" y="206.50">fastNormXCorr (dvc_impl.py:243)</text></g><g><title>fastNormXCorr (dvc_impl.py:244) (3,099 samples, 1.65%)</title><rect x="94.4631%" y="196" width="1.6513%" height="15" fill="rgb(249,43,39)"/><text x="94.7131%" y="206.50"></text></g><g><title>correlate (dvc_impl.py:394) (179,838 samples, 95.83%)</title><rect x="0.7694%" y="180" width="95.8277%" height="15" fill="rgb(209,38,44)"/><text x="1.0194%" y="190.50">correlate (dvc_impl.py:394)</text></g><g><title>&lt;module&gt; (dvc.py:124) (186,853 samples, 99.57%)</title><rect x="0.0000%" y="148" width="99.5657%" height="15" fill="rgb(236,212,23)"/><text x="0.2500%" y="158.50">&lt;module&gt; (dvc.py:124)</text></g><g><title>dvc (dvc_impl.py:526) (186,814 samples, 99.54%)</title><rect x="0.0208%" y="164" width="99.5449%" height="15" fill="rgb(242,79,21)"/><text x="0.2708%" y="174.50">dvc (dvc_impl.py:526)</text></g><g><title>_run_module_as_main (runpy.py:193) (187,652 samples, 99.99%)</title><rect x="0.0000%" y="52" width="99.9915%" height="15" fill="rgb(211,96,35)"/><text x="0.2500%" y="62.50">_run_module_as_main (runpy.py:193)</text></g><g><title>_run_code (runpy.py:86) (187,652 samples, 99.99%)</title><rect x="0.0000%" y="68" width="99.9915%" height="15" fill="rgb(253,215,40)"/><text x="0.2500%" y="78.50">_run_code (runpy.py:86)</text></g><g><title>&lt;module&gt; (voxie\run_with_pythonlib_helper.py:23) (187,652 samples, 99.99%)</title><rect x="0.0000%" y="84" width="99.9915%" height="15" fill="rgb(211,81,21)"/><text x="0.2500%" y="94.50">&lt;module&gt; (voxie\run_with_pythonlib_helper.py:23)</text></g><g><title>main (voxie\run_with_pythonlib_helper.py:20) (187,652 samples, 99.99%)</title><rect x="0.0000%" y="100" width="99.9915%" height="15" fill="rgb(208,190,38)"/><text x="0.2500%" y="110.50">main (voxie\run_with_pythonlib_helper.py:20)</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:783) (187,652 samples, 99.99%)</title><rect x="0.0000%" y="116" width="99.9915%" height="15" fill="rgb(235,213,38)"/><text x="0.2500%" y="126.50">exec_module (&lt;frozen importlib._bootstrap_external&gt;:783)</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (187,652 samples, 99.99%)</title><rect x="0.0000%" y="132" width="99.9915%" height="15" fill="rgb(237,122,38)"/><text x="0.2500%" y="142.50">_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219)</text></g><g><title>all (187,668 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(244,218,35)"/><text x="0.2500%" y="46.50"></text></g></svg></svg>