<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>window_mean_std_batched (dvc_impl.py:71) (787 samples, 1.06%)</title><rect x="0.8461%" y="148" width="1.0587%" height="15" fill="rgb(227,0,7)"/><text x="1.0961%" y="158.50"></text></g><g><title>uniform_filter (scipy\ndimage\filters.py:852) (786 samples, 1.06%)</title><rect x="0.8475%" y="164" width="1.0573%" height="15" fill="rgb(217,0,24)"/><text x="1.0975%" y="174.50"></text></g><g><title>uniform_filter1d (scipy\ndimage\filters.py:793) (785 samples, 1.06%)</title><rect x="0.8488%" y="180" width="1.0560%" height="15" fill="rgb(221,193,54)"/><text x="1.0988%" y="190.50"></text></g><g><title>window_mean_std_batched (dvc_impl.py:73) (947 samples, 1.27%)</title><rect x="1.9048%" y="148" width="1.2739%" height="15" fill="rgb(248,212,6)"/><text x="2.1548%" y="158.50"></text></g><g><title>uniform_filter (scipy\ndimage\filters.py:852) (791 samples, 1.06%)</title><rect x="2.1146%" y="164" width="1.0640%" height="15" fill="rgb(208,68,35)"/><text x="2.3646%" y="174.50"></text></g><g><title>uniform_filter1d (scipy\ndimage\filters.py:793) (790 samples, 1.06%)</title><rect x="2.1160%" y="180" width="1.0627%" height="15" fill="rgb(232,128,0)"/><text x="2.3660%" y="190.50"></text></g><g><title>fast_norm_cross_corr (dvc_impl.py:191) (2,232 samples, 3.00%)</title><rect x="0.8165%" y="132" width="3.0025%" height="15" fill="rgb(207,160,47)"/><text x="1.0665%" y="142.50">fas..</text></g><g><title>correlate_gpu (dvc_impl.py:133) (1,107 samples, 1.49%)</title><rect x="4.7916%" y="148" width="1.4891%" height="15" fill="rgb(228,23,34)"/><text x="5.0416%" y="158.50"></text></g><g><title>get (reikna\cluda\ocl.py:65) (1,107 samples, 1.49%)</title><rect x="4.7916%" y="164" width="1.4891%" height="15" fill="rgb(218,30,26)"/><text x="5.0416%" y="174.50"></text></g><g><title>get (pyopencl\array.py:755) (1,107 samples, 1.49%)</title><rect x="4.7916%" y="180" width="1.4891%" height="15" fill="rgb(220,122,19)"/><text x="5.0416%" y="190.50"></text></g><g><title>_get (pyopencl\array.py:714) (1,107 samples, 1.49%)</title><rect x="4.7916%" y="196" width="1.4891%" height="15" fill="rgb(250,228,42)"/><text x="5.0416%" y="206.50"></text></g><g><title>enqueue_copy (pyopencl\__init__.py:1772) (1,107 samples, 1.49%)</title><rect x="4.7916%" y="212" width="1.4891%" height="15" fill="rgb(240,193,28)"/><text x="5.0416%" y="222.50"></text></g><g><title>fast_norm_cross_corr (dvc_impl.py:195) (1,926 samples, 2.59%)</title><rect x="3.8190%" y="132" width="2.5908%" height="15" fill="rgb(216,20,37)"/><text x="4.0690%" y="142.50">fa..</text></g><g><title>_work (dvc_impl.py:375) (5,331 samples, 7.17%)</title><rect x="0.4708%" y="116" width="7.1712%" height="15" fill="rgb(206,188,39)"/><text x="0.7208%" y="126.50">_work (dvc..</text></g><g><title>_optimal_filter_3d_patch (subpixel_optimal_filter.py:22) (4,273 samples, 5.75%)</title><rect x="8.5567%" y="148" width="5.7480%" height="15" fill="rgb(217,207,13)"/><text x="8.8067%" y="158.50">_optima..</text></g><g><title>_im2col (subpixel_optimal_filter.py:14) (4,272 samples, 5.75%)</title><rect x="8.5581%" y="164" width="5.7466%" height="15" fill="rgb(231,73,38)"/><text x="8.8081%" y="174.50">_im2col..</text></g><g><title>inv (numpy\linalg\linalg.py:547) (3,242 samples, 4.36%)</title><rect x="19.6061%" y="180" width="4.3611%" height="15" fill="rgb(225,20,46)"/><text x="19.8561%" y="190.50">inv (..</text></g><g><title>_optimal_filter_3d_patch (subpixel_optimal_filter.py:37) (7,148 samples, 9.62%)</title><rect x="14.4998%" y="148" width="9.6154%" height="15" fill="rgb(210,31,41)"/><text x="14.7498%" y="158.50">_optimal_filte..</text></g><g><title>inv (&lt;__array_function__ internals&gt;:5) (3,386 samples, 4.55%)</title><rect x="19.5604%" y="164" width="4.5548%" height="15" fill="rgb(221,200,47)"/><text x="19.8104%" y="174.50">inv (..</text></g><g><title>optimal_filter_3d_patch_shift (subpixel_optimal_filter.py:77) (12,626 samples, 16.98%)</title><rect x="7.7900%" y="132" width="16.9844%" height="15" fill="rgb(226,26,5)"/><text x="8.0400%" y="142.50">optimal_filter_3d_patch_sh..</text></g><g><title>_work (dvc_impl.py:418) (12,810 samples, 17.23%)</title><rect x="7.7698%" y="116" width="17.2319%" height="15" fill="rgb(249,33,26)"/><text x="8.0198%" y="126.50">_work (dvc_impl.py:418)</text></g><g><title>thread 78216 (18,606 samples, 25.03%)</title><rect x="0.0000%" y="52" width="25.0286%" height="15" fill="rgb(235,183,28)"/><text x="0.2500%" y="62.50">thread 78216</text></g><g><title>_bootstrap (threading.py:890) (18,606 samples, 25.03%)</title><rect x="0.0000%" y="68" width="25.0286%" height="15" fill="rgb(221,5,38)"/><text x="0.2500%" y="78.50">_bootstrap (threading.py:890)</text></g><g><title>_bootstrap_inner (threading.py:932) (18,606 samples, 25.03%)</title><rect x="0.0000%" y="84" width="25.0286%" height="15" fill="rgb(247,18,42)"/><text x="0.2500%" y="94.50">_bootstrap_inner (threading.py:932)</text></g><g><title>run (threading.py:870) (18,606 samples, 25.03%)</title><rect x="0.0000%" y="100" width="25.0286%" height="15" fill="rgb(241,131,45)"/><text x="0.2500%" y="110.50">run (threading.py:870)</text></g><g><title>window_mean_std_batched (dvc_impl.py:71) (805 samples, 1.08%; 0.00%)</title><rect x="25.9312%" y="148" width="1.0829%" height="15" fill="rgb(255,255,255)"/><text x="26.1812%" y="158.50"></text></g><g><title>uniform_filter (scipy\ndimage\filters.py:852) (805 samples, 1.08%; 0.00%)</title><rect x="25.9312%" y="164" width="1.0829%" height="15" fill="rgb(255,255,255)"/><text x="26.1812%" y="174.50"></text></g><g><title>uniform_filter1d (scipy\ndimage\filters.py:793) (803 samples, 1.08%; -109.16%)</title><rect x="25.9339%" y="180" width="1.0802%" height="15" fill="rgb(47,173,93)"/><text x="26.1839%" y="190.50"></text></g><g><title>window_mean_std_batched (dvc_impl.py:73) (972 samples, 1.31%; -109.16%)</title><rect x="27.0141%" y="148" width="1.3075%" height="15" fill="rgb(47,173,93)"/><text x="27.2641%" y="158.50"></text></g><g><title>uniform_filter (scipy\ndimage\filters.py:852) (815 samples, 1.10%; 0.00%)</title><rect x="27.2253%" y="164" width="1.0963%" height="15" fill="rgb(255,255,255)"/><text x="27.4753%" y="174.50"></text></g><g><title>uniform_filter1d (scipy\ndimage\filters.py:793) (815 samples, 1.10%; -109.16%)</title><rect x="27.2253%" y="180" width="1.0963%" height="15" fill="rgb(47,173,93)"/><text x="27.4753%" y="190.50"></text></g><g><title>fast_norm_cross_corr (dvc_impl.py:191) (2,271 samples, 3.05%; -109.16%)</title><rect x="25.9124%" y="132" width="3.0549%" height="15" fill="rgb(47,173,93)"/><text x="26.1624%" y="142.50">fas..</text></g><g><title>correlate_gpu (dvc_impl.py:133) (1,300 samples, 1.75%; 0.00%)</title><rect x="29.6587%" y="148" width="1.7487%" height="15" fill="rgb(255,255,255)"/><text x="29.9087%" y="158.50"></text></g><g><title>get (reikna\cluda\ocl.py:65) (1,300 samples, 1.75%; 0.00%)</title><rect x="29.6587%" y="164" width="1.7487%" height="15" fill="rgb(255,255,255)"/><text x="29.9087%" y="174.50"></text></g><g><title>get (pyopencl\array.py:755) (1,300 samples, 1.75%; 0.00%)</title><rect x="29.6587%" y="180" width="1.7487%" height="15" fill="rgb(255,255,255)"/><text x="29.9087%" y="190.50"></text></g><g><title>_get (pyopencl\array.py:714) (1,298 samples, 1.75%; 0.00%)</title><rect x="29.6614%" y="196" width="1.7461%" height="15" fill="rgb(255,255,255)"/><text x="29.9114%" y="206.50"></text></g><g><title>enqueue_copy (pyopencl\__init__.py:1772) (1,298 samples, 1.75%; -109.16%)</title><rect x="29.6614%" y="212" width="1.7461%" height="15" fill="rgb(47,173,93)"/><text x="29.9114%" y="222.50"></text></g><g><title>fast_norm_cross_corr (dvc_impl.py:195) (1,944 samples, 2.62%; -109.16%)</title><rect x="28.9673%" y="132" width="2.6150%" height="15" fill="rgb(47,173,93)"/><text x="29.2173%" y="142.50">fa..</text></g><g><title>_work (dvc_impl.py:375) (5,305 samples, 7.14%; -109.16%)</title><rect x="25.5989%" y="116" width="7.1362%" height="15" fill="rgb(47,173,93)"/><text x="25.8489%" y="126.50">_work (dvc..</text></g><g><title>_optimal_filter_3d_patch (subpixel_optimal_filter.py:22) (4,308 samples, 5.80%; -109.16%)</title><rect x="33.5450%" y="148" width="5.7951%" height="15" fill="rgb(47,173,93)"/><text x="33.7950%" y="158.50">_optima..</text></g><g><title>_im2col (subpixel_optimal_filter.py:14) (4,307 samples, 5.79%; -109.16%)</title><rect x="33.5463%" y="164" width="5.7937%" height="15" fill="rgb(47,173,93)"/><text x="33.7963%" y="174.50">_im2col..</text></g><g><title>inv (numpy\linalg\linalg.py:547) (3,289 samples, 4.42%; -109.16%)</title><rect x="44.7975%" y="180" width="4.4243%" height="15" fill="rgb(47,173,93)"/><text x="45.0475%" y="190.50">inv (..</text></g><g><title>_optimal_filter_3d_patch (subpixel_optimal_filter.py:37) (7,310 samples, 9.83%; -109.16%)</title><rect x="39.5297%" y="148" width="9.8333%" height="15" fill="rgb(47,173,93)"/><text x="39.7797%" y="158.50">_optimal_filte..</text></g><g><title>inv (&lt;__array_function__ internals&gt;:5) (3,425 samples, 4.61%; -109.16%)</title><rect x="44.7558%" y="164" width="4.6073%" height="15" fill="rgb(47,173,93)"/><text x="45.0058%" y="174.50">inv (..</text></g><g><title>optimal_filter_3d_patch_shift (subpixel_optimal_filter.py:77) (12,717 samples, 17.11%; -109.16%)</title><rect x="32.8240%" y="132" width="17.1068%" height="15" fill="rgb(47,173,93)"/><text x="33.0740%" y="142.50">optimal_filter_3d_patch_sh..</text></g><g><title>_work (dvc_impl.py:418) (12,920 samples, 17.38%; -109.16%)</title><rect x="32.8078%" y="116" width="17.3798%" height="15" fill="rgb(47,173,93)"/><text x="33.0578%" y="126.50">_work (dvc_impl.py:418)</text></g><g><title>thread 81428 (18,605 samples, 25.03%; 0.00%)</title><rect x="25.1981%" y="52" width="25.0272%" height="15" fill="rgb(255,255,255)"/><text x="25.4481%" y="62.50">thread 81428</text></g><g><title>_bootstrap (threading.py:890) (18,605 samples, 25.03%; 0.00%)</title><rect x="25.1981%" y="68" width="25.0272%" height="15" fill="rgb(255,255,255)"/><text x="25.4481%" y="78.50">_bootstrap (threading.py:890)</text></g><g><title>_bootstrap_inner (threading.py:932) (18,605 samples, 25.03%; 0.00%)</title><rect x="25.1981%" y="84" width="25.0272%" height="15" fill="rgb(255,255,255)"/><text x="25.4481%" y="94.50">_bootstrap_inner (threading.py:932)</text></g><g><title>run (threading.py:870) (18,605 samples, 25.03%; 0.00%)</title><rect x="25.1981%" y="100" width="25.0272%" height="15" fill="rgb(255,255,255)"/><text x="25.4481%" y="110.50">run (threading.py:870)</text></g><g><title>window_mean_std_batched (dvc_impl.py:71) (833 samples, 1.12%; 0.00%)</title><rect x="50.9598%" y="148" width="1.1205%" height="15" fill="rgb(255,255,255)"/><text x="51.2098%" y="158.50"></text></g><g><title>uniform_filter (scipy\ndimage\filters.py:852) (832 samples, 1.12%; 0.00%)</title><rect x="50.9611%" y="164" width="1.1192%" height="15" fill="rgb(255,255,255)"/><text x="51.2111%" y="174.50"></text></g><g><title>uniform_filter1d (scipy\ndimage\filters.py:793) (830 samples, 1.12%; -109.16%)</title><rect x="50.9638%" y="180" width="1.1165%" height="15" fill="rgb(47,173,93)"/><text x="51.2138%" y="190.50"></text></g><g><title>window_mean_std_batched (dvc_impl.py:73) (1,040 samples, 1.40%; -109.16%)</title><rect x="52.0803%" y="148" width="1.3990%" height="15" fill="rgb(47,173,93)"/><text x="52.3303%" y="158.50"></text></g><g><title>uniform_filter (scipy\ndimage\filters.py:852) (875 samples, 1.18%; 0.00%)</title><rect x="52.3023%" y="164" width="1.1770%" height="15" fill="rgb(255,255,255)"/><text x="52.5523%" y="174.50"></text></g><g><title>uniform_filter1d (scipy\ndimage\filters.py:793) (875 samples, 1.18%; -109.16%)</title><rect x="52.3023%" y="180" width="1.1770%" height="15" fill="rgb(47,173,93)"/><text x="52.5523%" y="190.50"></text></g><g><title>fast_norm_cross_corr (dvc_impl.py:191) (2,403 samples, 3.23%; -109.16%)</title><rect x="50.9315%" y="132" width="3.2325%" height="15" fill="rgb(47,173,93)"/><text x="51.1815%" y="142.50">fas..</text></g><g><title>correlate_gpu (dvc_impl.py:133) (1,454 samples, 1.96%; 0.00%)</title><rect x="54.5407%" y="148" width="1.9559%" height="15" fill="rgb(255,255,255)"/><text x="54.7907%" y="158.50">c..</text></g><g><title>get (reikna\cluda\ocl.py:65) (1,454 samples, 1.96%; 0.00%)</title><rect x="54.5407%" y="164" width="1.9559%" height="15" fill="rgb(255,255,255)"/><text x="54.7907%" y="174.50">g..</text></g><g><title>get (pyopencl\array.py:755) (1,454 samples, 1.96%; 0.00%)</title><rect x="54.5407%" y="180" width="1.9559%" height="15" fill="rgb(255,255,255)"/><text x="54.7907%" y="190.50">g..</text></g><g><title>_get (pyopencl\array.py:714) (1,454 samples, 1.96%; 0.00%)</title><rect x="54.5407%" y="196" width="1.9559%" height="15" fill="rgb(255,255,255)"/><text x="54.7907%" y="206.50">_..</text></g><g><title>enqueue_copy (pyopencl\__init__.py:1772) (1,454 samples, 1.96%; -109.16%)</title><rect x="54.5407%" y="212" width="1.9559%" height="15" fill="rgb(47,173,93)"/><text x="54.7907%" y="222.50">e..</text></g><g><title>fast_norm_cross_corr (dvc_impl.py:195) (1,856 samples, 2.50%; -109.16%)</title><rect x="54.1640%" y="132" width="2.4967%" height="15" fill="rgb(47,173,93)"/><text x="54.4140%" y="142.50">fa..</text></g><g><title>_work (dvc_impl.py:375) (5,279 samples, 7.10%; -109.16%)</title><rect x="50.6168%" y="116" width="7.1013%" height="15" fill="rgb(47,173,93)"/><text x="50.8668%" y="126.50">_work (dvc..</text></g><g><title>_optimal_filter_3d_patch (subpixel_optimal_filter.py:22) (4,362 samples, 5.87%; 0.00%)</title><rect x="58.5130%" y="148" width="5.8677%" height="15" fill="rgb(255,255,255)"/><text x="58.7630%" y="158.50">_optima..</text></g><g><title>_im2col (subpixel_optimal_filter.py:14) (4,362 samples, 5.87%; -109.16%)</title><rect x="58.5130%" y="164" width="5.8677%" height="15" fill="rgb(47,173,93)"/><text x="58.7630%" y="174.50">_im2col..</text></g><g><title>inv (numpy\linalg\linalg.py:547) (3,082 samples, 4.15%; -109.16%)</title><rect x="69.8691%" y="180" width="4.1459%" height="15" fill="rgb(47,173,93)"/><text x="70.1191%" y="190.50">inv (..</text></g><g><title>_optimal_filter_3d_patch (subpixel_optimal_filter.py:37) (7,120 samples, 9.58%; -109.16%)</title><rect x="64.5475%" y="148" width="9.5777%" height="15" fill="rgb(47,173,93)"/><text x="64.7975%" y="158.50">_optimal_filte..</text></g><g><title>inv (&lt;__array_function__ internals&gt;:5) (3,190 samples, 4.29%; -109.16%)</title><rect x="69.8341%" y="164" width="4.2912%" height="15" fill="rgb(47,173,93)"/><text x="70.0841%" y="174.50">inv (..</text></g><g><title>optimal_filter_3d_patch_shift (subpixel_optimal_filter.py:77) (12,615 samples, 16.97%; -109.16%)</title><rect x="57.7759%" y="132" width="16.9696%" height="15" fill="rgb(47,173,93)"/><text x="58.0259%" y="142.50">optimal_filter_3d_patch_sh..</text></g><g><title>_work (dvc_impl.py:418) (12,765 samples, 17.17%; -109.16%)</title><rect x="57.7638%" y="116" width="17.1713%" height="15" fill="rgb(47,173,93)"/><text x="58.0138%" y="126.50">_work (dvc_impl.py:418)</text></g><g><title>thread 84172 (18,397 samples, 24.75%; 0.00%)</title><rect x="50.2253%" y="52" width="24.7474%" height="15" fill="rgb(255,255,255)"/><text x="50.4753%" y="62.50">thread 84172</text></g><g><title>_bootstrap (threading.py:890) (18,397 samples, 24.75%; 0.00%)</title><rect x="50.2253%" y="68" width="24.7474%" height="15" fill="rgb(255,255,255)"/><text x="50.4753%" y="78.50">_bootstrap (threading.py:890)</text></g><g><title>_bootstrap_inner (threading.py:932) (18,397 samples, 24.75%; 0.00%)</title><rect x="50.2253%" y="84" width="24.7474%" height="15" fill="rgb(255,255,255)"/><text x="50.4753%" y="94.50">_bootstrap_inner (threading.py:932)</text></g><g><title>run (threading.py:870) (18,397 samples, 24.75%; 0.00%)</title><rect x="50.2253%" y="100" width="24.7474%" height="15" fill="rgb(255,255,255)"/><text x="50.4753%" y="110.50">run (threading.py:870)</text></g><g><title>window_mean_std_batched (dvc_impl.py:71) (773 samples, 1.04%; 0.00%)</title><rect x="75.7234%" y="148" width="1.0398%" height="15" fill="rgb(255,255,255)"/><text x="75.9734%" y="158.50"></text></g><g><title>uniform_filter (scipy\ndimage\filters.py:852) (773 samples, 1.04%; 0.00%)</title><rect x="75.7234%" y="164" width="1.0398%" height="15" fill="rgb(255,255,255)"/><text x="75.9734%" y="174.50"></text></g><g><title>uniform_filter1d (scipy\ndimage\filters.py:793) (773 samples, 1.04%; -109.16%)</title><rect x="75.7234%" y="180" width="1.0398%" height="15" fill="rgb(47,173,93)"/><text x="75.9734%" y="190.50"></text></g><g><title>window_mean_std_batched (dvc_impl.py:73) (986 samples, 1.33%; -109.16%)</title><rect x="76.7632%" y="148" width="1.3264%" height="15" fill="rgb(47,173,93)"/><text x="77.0132%" y="158.50"></text></g><g><title>uniform_filter (scipy\ndimage\filters.py:852) (828 samples, 1.11%; 0.00%)</title><rect x="76.9757%" y="164" width="1.1138%" height="15" fill="rgb(255,255,255)"/><text x="77.2257%" y="174.50"></text></g><g><title>uniform_filter1d (scipy\ndimage\filters.py:793) (828 samples, 1.11%; -109.16%)</title><rect x="76.9757%" y="180" width="1.1138%" height="15" fill="rgb(47,173,93)"/><text x="77.2257%" y="190.50"></text></g><g><title>fast_norm_cross_corr (dvc_impl.py:191) (2,233 samples, 3.00%; -109.16%)</title><rect x="75.7019%" y="132" width="3.0038%" height="15" fill="rgb(47,173,93)"/><text x="75.9519%" y="142.50">fas..</text></g><g><title>correlate_gpu (dvc_impl.py:133) (1,071 samples, 1.44%; 0.00%)</title><rect x="79.6029%" y="148" width="1.4407%" height="15" fill="rgb(255,255,255)"/><text x="79.8529%" y="158.50"></text></g><g><title>get (reikna\cluda\ocl.py:65) (1,071 samples, 1.44%; 0.00%)</title><rect x="79.6029%" y="164" width="1.4407%" height="15" fill="rgb(255,255,255)"/><text x="79.8529%" y="174.50"></text></g><g><title>get (pyopencl\array.py:755) (1,071 samples, 1.44%; 0.00%)</title><rect x="79.6029%" y="180" width="1.4407%" height="15" fill="rgb(255,255,255)"/><text x="79.8529%" y="190.50"></text></g><g><title>_get (pyopencl\array.py:714) (1,070 samples, 1.44%; 0.00%)</title><rect x="79.6042%" y="196" width="1.4394%" height="15" fill="rgb(255,255,255)"/><text x="79.8542%" y="206.50"></text></g><g><title>enqueue_copy (pyopencl\__init__.py:1772) (1,070 samples, 1.44%; -109.16%)</title><rect x="79.6042%" y="212" width="1.4394%" height="15" fill="rgb(47,173,93)"/><text x="79.8542%" y="222.50"></text></g><g><title>fast_norm_cross_corr (dvc_impl.py:195) (1,806 samples, 2.43%; -109.16%)</title><rect x="78.7057%" y="132" width="2.4294%" height="15" fill="rgb(47,173,93)"/><text x="78.9557%" y="142.50">fa..</text></g><g><title>_work (dvc_impl.py:375) (5,266 samples, 7.08%; -109.16%)</title><rect x="75.4099%" y="116" width="7.0838%" height="15" fill="rgb(47,173,93)"/><text x="75.6599%" y="126.50">_work (dvc..</text></g><g><title>_optimal_filter_3d_patch (subpixel_optimal_filter.py:22) (4,420 samples, 5.95%; 0.00%)</title><rect x="83.3815%" y="148" width="5.9457%" height="15" fill="rgb(255,255,255)"/><text x="83.6315%" y="158.50">_optimal..</text></g><g><title>_im2col (subpixel_optimal_filter.py:14) (4,420 samples, 5.95%; -109.16%)</title><rect x="83.3815%" y="164" width="5.9457%" height="15" fill="rgb(47,173,93)"/><text x="83.6315%" y="174.50">_im2col ..</text></g><g><title>inv (numpy\linalg\linalg.py:547) (3,178 samples, 4.28%; -109.16%)</title><rect x="94.7269%" y="180" width="4.2750%" height="15" fill="rgb(47,173,93)"/><text x="94.9769%" y="190.50">inv (..</text></g><g><title>_optimal_filter_3d_patch (subpixel_optimal_filter.py:37) (7,172 samples, 9.65%; -109.16%)</title><rect x="89.5008%" y="148" width="9.6477%" height="15" fill="rgb(47,173,93)"/><text x="89.7508%" y="158.50">_optimal_filte..</text></g><g><title>inv (&lt;__array_function__ internals&gt;:5) (3,312 samples, 4.46%; -109.16%)</title><rect x="94.6932%" y="164" width="4.4553%" height="15" fill="rgb(47,173,93)"/><text x="94.9432%" y="174.50">inv (..</text></g><g><title>optimal_filter_3d_patch_shift (subpixel_optimal_filter.py:77) (12,750 samples, 17.15%; -109.16%)</title><rect x="82.5785%" y="132" width="17.1512%" height="15" fill="rgb(47,173,93)"/><text x="82.8285%" y="142.50">optimal_filter_3d_patch_shi..</text></g><g><title>_work (dvc_impl.py:418) (12,939 samples, 17.41%; -109.16%)</title><rect x="82.5664%" y="116" width="17.4054%" height="15" fill="rgb(47,173,93)"/><text x="82.8164%" y="126.50">_work (dvc_impl.py:418)</text></g><g><title>all (74,339 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(249,31,29)"/><text x="0.2500%" y="46.50"></text></g><g><title>thread 87432 (18,605 samples, 25.03%; 0.00%)</title><rect x="74.9728%" y="52" width="25.0272%" height="15" fill="rgb(255,255,255)"/><text x="75.2228%" y="62.50">thread 87432</text></g><g><title>_bootstrap (threading.py:890) (18,605 samples, 25.03%; 0.00%)</title><rect x="74.9728%" y="68" width="25.0272%" height="15" fill="rgb(255,255,255)"/><text x="75.2228%" y="78.50">_bootstrap (threading.py:890)</text></g><g><title>_bootstrap_inner (threading.py:932) (18,605 samples, 25.03%; 0.00%)</title><rect x="74.9728%" y="84" width="25.0272%" height="15" fill="rgb(255,255,255)"/><text x="75.2228%" y="94.50">_bootstrap_inner (threading.py:932)</text></g><g><title>run (threading.py:870) (18,605 samples, 25.03%; 0.00%)</title><rect x="74.9728%" y="100" width="25.0272%" height="15" fill="rgb(255,255,255)"/><text x="75.2228%" y="110.50">run (threading.py:870)</text></g></svg></svg>