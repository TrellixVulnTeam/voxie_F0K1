/*
 * Copyright (c) 2014-2022 The Voxie Authors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

// This file was automatically generated by tools/update-dbus-types.py
#pragma once

// All changes to this file will be lost

#include <VoxieClient/DBusTypes.hpp>
#include <VoxieClient/VoxieClient.hpp>

namespace vx {
VOXIECLIENT_EXPORT void initDBusTypes();
}

Q_DECLARE_METATYPE(
    VX_IDENTITY_TYPE((std::tuple<std::tuple<double, double, double>,
                                 std::tuple<double, double, double>>)))
Q_DECLARE_METATYPE(
    VX_IDENTITY_TYPE((std::tuple<std::tuple<double, double, double>, double>)))
Q_DECLARE_METATYPE(VX_IDENTITY_TYPE(
    (std::tuple<QMap<QString, QDBusVariant>, qint64,
                std::tuple<QString, quint32, QString>, std::tuple<quint64>,
                std::tuple<qint64>, QMap<QString, QDBusVariant>>)))
Q_DECLARE_METATYPE(VX_IDENTITY_TYPE(
    (std::tuple<QMap<QString, QDBusVariant>, qint64,
                std::tuple<QString, quint32, QString>,
                std::tuple<quint64, quint64>, std::tuple<qint64, qint64>,
                QMap<QString, QDBusVariant>>)))
Q_DECLARE_METATYPE(
    VX_IDENTITY_TYPE((std::tuple<QMap<QString, QDBusVariant>, qint64,
                                 std::tuple<QString, quint32, QString>,
                                 std::tuple<quint64, quint64, quint64>,
                                 std::tuple<qint64, qint64, qint64>,
                                 QMap<QString, QDBusVariant>>)))
Q_DECLARE_METATYPE(VX_IDENTITY_TYPE((std::tuple<bool, QString>)))
Q_DECLARE_METATYPE(VX_IDENTITY_TYPE(
    (std::tuple<double, std::tuple<double, double, double, double>, qint32>)))
Q_DECLARE_METATYPE(VX_IDENTITY_TYPE(
    (std::tuple<double, std::tuple<double, double, double, double>, qint64>)))
Q_DECLARE_METATYPE(VX_IDENTITY_TYPE((std::tuple<double, double>)))
Q_DECLARE_METATYPE(VX_IDENTITY_TYPE((std::tuple<double, double, double>)))
Q_DECLARE_METATYPE(
    VX_IDENTITY_TYPE((std::tuple<double, double, double, double>)))
Q_DECLARE_METATYPE(VX_IDENTITY_TYPE(
    (std::tuple<QString, std::tuple<QString, quint32, QString>, QString,
                QMap<QString, QDBusVariant>, QMap<QString, QDBusVariant>>)))
Q_DECLARE_METATYPE(
    VX_IDENTITY_TYPE((std::tuple<QString, QMap<QString, QDBusVariant>>)))
Q_DECLARE_METATYPE(VX_IDENTITY_TYPE((std::tuple<QString, QDBusObjectPath>)))
Q_DECLARE_METATYPE(VX_IDENTITY_TYPE(
    (std::tuple<QString, QDBusObjectPath, QString, QMap<QString, QDBusVariant>,
                QMap<QString, QDBusVariant>>)))
Q_DECLARE_METATYPE(VX_IDENTITY_TYPE(
    (std::tuple<QString, QString, quint64,
                std::tuple<QString, quint32, QString>, QString,
                QMap<QString, QDBusVariant>, QMap<QString, QDBusVariant>>)))
Q_DECLARE_METATYPE(VX_IDENTITY_TYPE((std::tuple<QString, quint64>)))
Q_DECLARE_METATYPE(VX_IDENTITY_TYPE((std::tuple<QString, quint32, QString>)))
Q_DECLARE_METATYPE(std::tuple<quint64>)
Q_DECLARE_METATYPE(VX_IDENTITY_TYPE((std::tuple<quint64, QList<QDBusVariant>>)))
Q_DECLARE_METATYPE(VX_IDENTITY_TYPE(
    (std::tuple<quint64, QDBusObjectPath, QString, QMap<QString, QDBusVariant>,
                QMap<QString, QDBusVariant>>)))
Q_DECLARE_METATYPE(VX_IDENTITY_TYPE((std::tuple<quint64, quint64>)))
Q_DECLARE_METATYPE(VX_IDENTITY_TYPE((std::tuple<quint64, quint64, quint64>)))
Q_DECLARE_METATYPE(VX_IDENTITY_TYPE((std::tuple<quint32, quint32, quint32>)))
Q_DECLARE_METATYPE(std::tuple<qint64>)
Q_DECLARE_METATYPE(VX_IDENTITY_TYPE((std::tuple<qint64, qint64>)))
Q_DECLARE_METATYPE(VX_IDENTITY_TYPE((std::tuple<qint64, qint64, qint64>)))
Q_DECLARE_METATYPE(VX_IDENTITY_TYPE(
    (QList<std::tuple<std::tuple<double, double, double>, double>>)))
Q_DECLARE_METATYPE(VX_IDENTITY_TYPE(
    (QList<std::tuple<double, std::tuple<double, double, double, double>,
                      qint32>>)))
Q_DECLARE_METATYPE(VX_IDENTITY_TYPE(
    (QList<std::tuple<double, std::tuple<double, double, double, double>,
                      qint64>>)))
Q_DECLARE_METATYPE(
    VX_IDENTITY_TYPE((QList<std::tuple<double, double, double>>)))
Q_DECLARE_METATYPE(VX_IDENTITY_TYPE(
    (QList<
        std::tuple<QString, std::tuple<QString, quint32, QString>, QString,
                   QMap<QString, QDBusVariant>, QMap<QString, QDBusVariant>>>)))
Q_DECLARE_METATYPE(VX_IDENTITY_TYPE(
    (QList<
        std::tuple<QString, QDBusObjectPath, QString,
                   QMap<QString, QDBusVariant>, QMap<QString, QDBusVariant>>>)))
Q_DECLARE_METATYPE(VX_IDENTITY_TYPE(
    (QList<std::tuple<
         QString, QString, quint64, std::tuple<QString, quint32, QString>,
         QString, QMap<QString, QDBusVariant>, QMap<QString, QDBusVariant>>>)))
Q_DECLARE_METATYPE(VX_IDENTITY_TYPE((QList<std::tuple<QString, quint64>>)))
Q_DECLARE_METATYPE(
    VX_IDENTITY_TYPE((QList<std::tuple<quint64, QList<QDBusVariant>>>)))
Q_DECLARE_METATYPE(VX_IDENTITY_TYPE(
    (QList<
        std::tuple<quint64, QDBusObjectPath, QString,
                   QMap<QString, QDBusVariant>, QMap<QString, QDBusVariant>>>)))
Q_DECLARE_METATYPE(
    VX_IDENTITY_TYPE((QList<std::tuple<quint32, quint32, quint32>>)))
Q_DECLARE_METATYPE(VX_IDENTITY_TYPE((QList<QMap<QString, QDBusVariant>>)))
Q_DECLARE_METATYPE(QList<quint64>)
Q_DECLARE_METATYPE(QList<QDBusVariant>)
Q_DECLARE_METATYPE(QList<qint64>)
Q_DECLARE_METATYPE(
    VX_IDENTITY_TYPE((QMap<QDBusObjectPath, QMap<QString, QDBusVariant>>)))
Q_DECLARE_METATYPE(VX_IDENTITY_TYPE((QMap<QDBusObjectPath, QDBusObjectPath>)))
Q_DECLARE_METATYPE(VX_IDENTITY_TYPE((QMap<QDBusObjectPath, quint64>)))
Q_DECLARE_METATYPE(VX_IDENTITY_TYPE((QMap<QString, QDBusSignature>)))
Q_DECLARE_METATYPE(VX_IDENTITY_TYPE((QMap<QString, QDBusVariant>)))
